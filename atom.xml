<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朝日</title>
  
  <subtitle>ZhaoriGame</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-02-17T16:43:39.870Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhaori</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重拾博客</title>
    <link href="http://yoursite.com/2023/02/18/%E9%87%8D%E6%8B%BE%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2023/02/18/%E9%87%8D%E6%8B%BE%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-02-17T16:26:54.000Z</published>
    <updated>2023-02-17T16:43:39.870Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>使用手册</title>
    <link href="http://yoursite.com/2022/01/14/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2022/01/14/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</id>
    <published>2022-01-14T14:09:46.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HEXO使用手册"><a href="#HEXO使用手册" class="headerlink" title="HEXO使用手册"></a>HEXO使用手册</h1><p>测试和搭建环境</p><ul><li><code>hexo clean</code>清除了你之前生成的东西，也可以不加。</li><li><code>hexo new newpage</code> 新建一个文章</li><li><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写</li><li><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</li><li><code>hexo new draft newpage</code> 新建一个 <code>newpage.md</code> 文件</li><li><code>hexo publish draft newpage</code>发布post</li></ul><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HEXO使用手册&quot;&gt;&lt;a href=&quot;#HEXO使用手册&quot; class=&quot;headerlink&quot; title=&quot;HEXO使用手册&quot;&gt;&lt;/a&gt;HEXO使用手册&lt;/h1&gt;&lt;p&gt;测试和搭建环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hexo clean&lt;/code&gt;清除</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Free_HDRSkybox</title>
    <link href="http://yoursite.com/2019/08/15/Free-HDRSkybox/"/>
    <id>http://yoursite.com/2019/08/15/Free-HDRSkybox/</id>
    <published>2019-08-15T13:28:39.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<p><a href="hdrihaven.com">HDR天空盒</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;hdrihaven.com&quot;&gt;HDR天空盒&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
    <category term="SkyBox" scheme="http://yoursite.com/tags/SkyBox/"/>
    
  </entry>
  
  <entry>
    <title>依赖倒置原则</title>
    <link href="http://yoursite.com/2019/08/13/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/13/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</id>
    <published>2019-08-13T11:50:12.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计原则：依赖倒置原则"><a href="#设计原则：依赖倒置原则" class="headerlink" title="设计原则：依赖倒置原则"></a>设计原则：依赖倒置原则</h1><p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><p>总结：依赖倒置原则</p><ul><li>A.高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。</li><li>B.抽象不应该依赖于具体，具体应该依赖于抽象。</li></ul><h2 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h2><p>当在 Unity 设计底层模块时，上层模块调用的东西其实就只是一些暴露出来的方法，当底层改动的时候上层也需要改动，这就形成了高层次模块对低层次模块的依赖。这时候可以抽象出来这些需要暴露的方法，即使用接口抽象出来，使得底层依赖了抽象的接口，高层也依赖了抽象的接口，从而使得设计更加清爽。</p><p><a href="https://zhuanlan.zhihu.com/p/28401100" target="_blank" rel="noopener">浅谈Unity开发中的分层设计</a> 中也使用了接口抽象的方式，不过是在底层之间的相互依赖中使用了接口，对于上层还是通过暴露公共方法的方式，加了个 模块管理器，来取得具体模块或者具体实现的接口。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/227328/1547347201283-d70ad1a3-3dc9-4b1c-8a60-5911580a7569.jpeg#align=left&amp;display=inline&amp;height=259&amp;originHeight=663&amp;originWidth=1116&amp;size=0&amp;width=436" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计原则：依赖倒置原则&quot;&gt;&lt;a href=&quot;#设计原则：依赖倒置原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则：依赖倒置原则&quot;&gt;&lt;/a&gt;设计原则：依赖倒置原则&lt;/h1&gt;&lt;p&gt;依赖倒置原则（Dependence Inversion Princi</summary>
      
    
    
    
    <category term="设计原则" scheme="http://yoursite.com/categories/设计原则/"/>
    
    
    <category term="设计原则" scheme="http://yoursite.com/tags/设计原则/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_桥接模式</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-13T11:49:45.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式：桥接模式-Bridge-Pattern"><a href="#设计模式：桥接模式-Bridge-Pattern" class="headerlink" title="设计模式：桥接模式(Bridge Pattern)"></a>设计模式：桥接模式(Bridge Pattern)</h1><p>将类的功能层次结构和实现层次结构相分离，使二者能够独立地变化，并在两者之间搭建桥梁，实现桥接。它是一种对象结构型模式，又称为<strong>柄体(Handle and Body)模式</strong>或<strong>接口(Interfce)模式</strong>。</p><p><strong>意图：</strong>在一个软件系统的抽象化和实现化之间使用关联关系（组合或者聚合关系）而<strong>不是继承关系</strong>，从而使两者可以相对独立地变化。</p><ul><li>将类的功能层次分离开，父类拥有子类所共有的功能，子类里实现新的功能。</li><li>将类的实现层次分离开，父类声明抽象方法，子类来实现。</li></ul><p>桥接模式主要包含以下几个角色</p><ul><li><strong>Abstraction</strong>：抽象类，抽象了功能的实现。</li><li><strong>RefinedAbstraction</strong>：扩充抽象类实现了具体的新的功能，构成功能层次结构。</li><li><strong>Implementor</strong>：实现类接口，提供了用于抽象类的接口。</li><li><strong>ConcreteImplementor</strong>：具体实现类，构成实现层次结构。</li></ul><p><strong>现要画一个不同颜色不同形状组合的圆，把抽象化和实现分离开来使其能独立地变化</strong></p><p><strong>抽象类：</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">  {</span><br><span class="line">      <span class="keyword">public</span> Color color;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetColor</span>(<span class="params">Color color</span>)</span></span><br><span class="line"><span class="function"></span>      {</span><br><span class="line">          <span class="keyword">this</span>.color = color;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><strong>扩充抽象类</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">  {</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>      {</span><br><span class="line">          color.BePaint(<span class="string">"圆"</span>);</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Square</span> : <span class="title">Shape</span></span><br><span class="line">  {</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>      {</span><br><span class="line">          color.BePaint(<span class="string">"正方形"</span>);</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><strong>实现类的接口：</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Color</span></span><br><span class="line">  {</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">BePaint</span>(<span class="params"><span class="keyword">string</span> shape</span>)</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><strong>具体实现类:</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Red</span> : <span class="title">Color</span></span><br><span class="line">   {</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BePaint</span>(<span class="params"><span class="keyword">string</span> shape</span>)</span></span><br><span class="line"><span class="function"></span>       {</span><br><span class="line">           Console.WriteLine(<span class="string">"红色的"</span> + shape);</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Black</span> : <span class="title">Color</span></span><br><span class="line">   {</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BePaint</span>(<span class="params"><span class="keyword">string</span> shape</span>)</span></span><br><span class="line"><span class="function"></span>       {</span><br><span class="line">           Console.WriteLine(<span class="string">"黑色的"</span> + shape);</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p><strong>画出不同颜色不同形状的圆：</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Draw</span></span><br><span class="line">   {</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoDraw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       {</span><br><span class="line">           Color red = <span class="keyword">new</span> Red();</span><br><span class="line">           Color black = <span class="keyword">new</span> Black();</span><br><span class="line">           Shape circle = <span class="keyword">new</span> Circle();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//画红色的圆</span></span><br><span class="line">           circle.SetColor(red);</span><br><span class="line">           circle.Draw();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//画黑色的圆</span></span><br><span class="line">           circle.SetColor(black);</span><br><span class="line">           circle.Draw();</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式：桥接模式-Bridge-Pattern&quot;&gt;&lt;a href=&quot;#设计模式：桥接模式-Bridge-Pattern&quot; class=&quot;headerlink&quot; title=&quot;设计模式：桥接模式(Bridge Pattern)&quot;&gt;&lt;/a&gt;设计模式：桥接模式(Bri</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_享元模式</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-13T11:49:34.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式：享元模式"><a href="#设计模式：享元模式" class="headerlink" title="设计模式：享元模式"></a>设计模式：享元模式</h1><h1 id="一、什么是享元模式？"><a href="#一、什么是享元模式？" class="headerlink" title="一、什么是享元模式？"></a>一、什么是享元模式？</h1><p><strong>享元模式（Flyweight）</strong>，运用共享技术有效地支持大量细粒度的对象。UML结构图如下：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/225637/1547115239417-4616bc5b-775f-4362-b2b2-0a165997e94b.png#align=left&amp;display=inline&amp;height=316&amp;name=%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8FUML%E5%9B%BE.png&amp;originHeight=316&amp;originWidth=634&amp;size=21131&amp;width=634" alt="享元模式UML图.png"></p><p>Flyweight是抽象享元角色。它是产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现；ConcreteFlyweight是具体享元角色，是具体的产品类，实现抽象角色定义的业务；<br>UnsharedConcreteFlyweight是不可共享的享元角色，一般不会出现在享元工厂中；<br>FlyweightFactory是享元工厂，它用于构造一个池容器，同时提供从池中获得对象的方法。</p><h1 id="二、内部状态与外部状态的区分"><a href="#二、内部状态与外部状态的区分" class="headerlink" title="二、内部状态与外部状态的区分"></a>二、内部状态与外部状态的区分</h1><p>享元享元，共享细粒度的单元。那么什么是细粒度的单元呢？如果用乐高积木作比喻，那么一个积木人可以称为一个完整的对象。如果我们把积木人拆开，可以进一步得到头、身躯，腿三个部分。而这些部分，相比于完整的积木人而言，它们三个就是细粒度的单元。</p><p>那么为什么要把一个完整的对象区分内外部呢？这岂不是增加了代码的复杂度？好，我们暂时搁置，接下来思考这样一个问题，如果我们要创造 10 个积木人，用程序怎么表示呢？</p><p>我们先创建一个积木人的类，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LegoMan</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Head;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Torso;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Leg;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LegoMan</span>(<span class="params"><span class="keyword">string</span> head, <span class="keyword">string</span> torso, <span class="keyword">string</span> leg</span>)</span></span><br><span class="line"><span class="function"></span>  {</span><br><span class="line">    <span class="keyword">this</span>.Head = head;</span><br><span class="line">    <span class="keyword">this</span>.Torso = torso;</span><br><span class="line">    <span class="keyword">this</span>.Leg = leg;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接着我们开始创造积木人，先采用直接 new 的方式：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> {</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">      LegoMan man1 = <span class="keyword">new</span> LegoMan(<span class="string">"head1"</span>, <span class="string">"torso1"</span>, <span class="string">"leg1"</span>);</span><br><span class="line">      LegoMan man2 = <span class="keyword">new</span> LegoMan(<span class="string">"head2"</span>, <span class="string">"torso2"</span>, <span class="string">"leg2"</span>);</span><br><span class="line">      ...</span><br><span class="line">      LegoMan man10 = <span class="keyword">new</span> LegoMan(<span class="string">"head10"</span>, <span class="string">"torso10"</span>, <span class="string">"leg10"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在我们得到了 10 个积木人，接下来我们对积木人作出一些限制，我们现在需要 10 个士兵积木人，由于士兵的制服统一，那么这一百个积木人的下半身是完全一样的，也就是说除了 Head，积木人的 Torso 和 Leg 都是一样的。现在我们继续创建十个士兵积木人。好吧，和上面的例子一样，只是传入的后两个参数均一致。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LegoMan manN = <span class="keyword">new</span> LegoMan(<span class="string">"headN"</span>, <span class="string">"torsoStandard"</span>, <span class="string">"legStandard"</span>)</span><br></pre></td></tr></tbody></table></figure><p>接下来，我们思考这样一个问题，如果需要 1000 个士兵积木人呢？如果采用一般的方式，需要创建 1000 个实例对象，但是这 1000 个对象都有着共同的部分，就是它们的 Torso 和 Leg。那我们可不可以把共同的部分抽取出来呢？当然可以，现在我们把 Torso 和 Leg 整合为一个 Body 类，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Body</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Torso;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Leg;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Body</span>(<span class="params"><span class="keyword">string</span> torso, <span class="keyword">string</span> leg</span>)</span></span><br><span class="line"><span class="function"></span>  {</span><br><span class="line">    <span class="keyword">this</span>.Torso = torso;</span><br><span class="line">    <span class="keyword">this</span>.Leg = leg;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>既然 Body 被提取出来了，那么 LegoMan 这个类也要被重写了，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LegoMan</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Head;</span><br><span class="line">  <span class="keyword">public</span> Body BodyIntrinsic;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LegoMan</span>(<span class="params"><span class="keyword">string</span> head, Body body</span>)</span></span><br><span class="line"><span class="function"></span>  {</span><br><span class="line">    <span class="keyword">this</span>.Head = head;</span><br><span class="line">    <span class="keyword">this</span>.BodyIntrinsic = body;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在我们再来创建 1000 个积木人士兵的话，应该是这样：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> {</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">      <span class="comment">//先创建一个通用的 Body </span></span><br><span class="line">      Body bodyStandard = <span class="keyword">new</span> Body(<span class="string">"torsoStandard"</span>, <span class="string">"legStandard"</span>);</span><br><span class="line">      </span><br><span class="line">      LegoMan man1 = <span class="keyword">new</span> LegoMan(<span class="string">"head1"</span>, bodyStandard);</span><br><span class="line">      LegoMan man2 = <span class="keyword">new</span> LegoMan(<span class="string">"head2"</span>, bodyStandard);</span><br><span class="line">      ...</span><br><span class="line">      LegoMan man1000 = <span class="keyword">new</span> LegoMan(<span class="string">"head1000"</span>, bodyStandard);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发现了吗？现在虽然也是1000个 LegoMan 的实例，但是却只有一个 Body，也就是说，1000个积木人士兵 的 Head，共享了一个 Body。听起来很疯狂，九头蛇也才九头，一千个头的怪物得多可怕！？哈哈，虽然积木人的玩具不可能这么拼，但是程序里，这种共享机制是可行的。Body 就是享元模式中的内部状态，一个重复度很高的细粒度单元。而 Head 则对应外部状态，会随着需求发生变化。这么分离的好处也很明显，就是大大减少了总数据量。如果不分离内外部，创建 1000 个积木人士兵的成本就是1000个 Head 和1000个 Body，而采用分离策略后，就只需要1000个 Head 外加1个 Body了。当随着创建对象数量级的增大，这种策略带来的好处会越来越明显。</p><h1 id="三、完整的享元模式"><a href="#三、完整的享元模式" class="headerlink" title="三、完整的享元模式"></a>三、完整的享元模式</h1><p>理解了分离内外部的原因后，下面简单实现一下享元模式</p><h2 id="1-Flyweight抽象类"><a href="#1-Flyweight抽象类" class="headerlink" title="1.Flyweight抽象类"></a>1.Flyweight抽象类</h2><p>通过最上面的 UML 图可以看出，Flyweight 被分为两部分，ConcreteFlyweight（共享的内部）和UnsharedConcreteFlyweight（不可共享的外部）。所以 Flyweight 最好被做成接口，或者抽象类，这里用抽象类实现，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Flyweight</span> </span><br><span class="line">{</span><br><span class="line">    <span class="comment">//内部状态</span></span><br><span class="line">    <span class="keyword">public</span> String intrinsic;</span><br><span class="line">    <span class="comment">//外部状态</span></span><br><span class="line">    <span class="keyword">public</span> String extrinsic;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//要求享元角色必须接受外部状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Flyweight</span>(<span class="params">String extrinsic</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">this</span>.extrinsic = extrinsic;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义业务操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Operate</span>(<span class="params"><span class="keyword">int</span> extrinsic</span>)</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-ConcreteFlyweight类"><a href="#2-ConcreteFlyweight类" class="headerlink" title="2. ConcreteFlyweight类"></a>2. ConcreteFlyweight类</h2><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> : <span class="title">Flyweight</span> </span><br><span class="line">{</span><br><span class="line">    <span class="comment">//接受外部状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span>(<span class="params">String extrinsic</span>):<span class="title">base</span>(<span class="params">extrinsic</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"共享的 "</span> + extrinsic);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据外部状态进行逻辑处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>(<span class="params"><span class="keyword">string</span> extrinsic</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"处理共享数据 "</span> + extrinsic);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-UnsharedConcreteFlyweight类"><a href="#3-UnsharedConcreteFlyweight类" class="headerlink" title="3. UnsharedConcreteFlyweight类"></a>3. UnsharedConcreteFlyweight类</h2><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> : <span class="title">Flyweight</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnsharedConcreteFlyweight</span>(<span class="params">String extrinsic</span>):<span class="title">base</span>(<span class="params">extrinsic</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"非共享的 "</span> + extrinsic);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>(<span class="params"><span class="keyword">int</span> extrinsic</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"处理非共享数据 "</span> + extrinsic);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-FlyweightFactory类"><a href="#4-FlyweightFactory类" class="headerlink" title="4. FlyweightFactory类"></a>4. FlyweightFactory类</h2><p>既然是处理大量数据，那免不了用一个对象池来进行管理，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span><br><span class="line">{</span><br><span class="line">    <span class="comment">//定义一个池容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Flyweight&gt; pool = <span class="keyword">new</span> List&lt;Flyweight&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//享元工厂</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Flyweight <span class="title">GetFlyweight</span>(<span class="params">String extrinsic</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">var</span> flyweight = pool.Find(obj =&gt; obj.extrinsic == extrinsic);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (flyweight == <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            flyweight = <span class="keyword">new</span> ConcreteFlyweight(extrinsic);</span><br><span class="line">            pool.Add(flyweight);</span><br><span class="line">            Debug.Log(<span class="string">"新创建 "</span> + extrinsic);</span><br><span class="line">        }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">          Debug.Log(<span class="string">"从池中取出 "</span> + extrinsic);</span><br><span class="line">      }</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-客户端的调用"><a href="#5-客户端的调用" class="headerlink" title="5.客户端的调用"></a>5.客户端的调用</h2><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> {</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Flyweight flyweight1 = FlyweightFactory.GetFlyweight(<span class="string">"one"</span>);</span><br><span class="line">        flyweight1.Operate(<span class="string">"one"</span>);</span><br><span class="line">        </span><br><span class="line">        Flyweight flyweight2 = FlyweightFactory.GetFlyweight(<span class="string">"two"</span>);</span><br><span class="line">        flyweight2.Operate(<span class="string">"two"</span>);</span><br><span class="line">        </span><br><span class="line">        Flyweight flyweight3 = FlyweightFactory.getFlyweight(<span class="string">"one"</span>);</span><br><span class="line">        flyweight3.Operate(<span class="string">"one"</span>);</span><br><span class="line">        </span><br><span class="line">        Flyweight unsharedFlyweight = <span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">"one"</span>);</span><br><span class="line">        unsharedFlyweight.operate(<span class="string">"one"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>打印结果如下：<br>新创建 one<br>处理共享数据 one<br>新创建 two<br>处理共享数据 two<br>从池中取出 one<br>处理共享数据 one<br>非共享的 one<br>处理非共享数据 one</p><p>参考博客：<br><a href="https://www.cnblogs.com/adamjwh/p/9070107.html" target="_blank" rel="noopener">https://www.cnblogs.com/adamjwh/p/9070107.html</a><br><a href="https://blog.csdn.net/justloveyou_/article/details/55045638" target="_blank" rel="noopener">https://blog.csdn.net/justloveyou_/article/details/55045638</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式：享元模式&quot;&gt;&lt;a href=&quot;#设计模式：享元模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式：享元模式&quot;&gt;&lt;/a&gt;设计模式：享元模式&lt;/h1&gt;&lt;h1 id=&quot;一、什么是享元模式？&quot;&gt;&lt;a href=&quot;#一、什么是享元模式？&quot; cla</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_命令模式</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-13T11:49:20.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式：命令模式"><a href="#设计模式：命令模式" class="headerlink" title="设计模式：命令模式"></a>设计模式：命令模式</h1><p><strong>命令模式在GoF中的定义是：</strong></p><blockquote><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化； 对请求排队或记录请求日志，以及支持可撤销的操作。<br>命令模式是一种回调的面向对象实现。</p></blockquote><p><strong>游戏设计模式里把它精简为：</strong></p><blockquote><p>命令是具现化的方法调用。</p></blockquote><p>两种术语都意味着将概念变成数据一个对象可以存储在变量中，传给函数。<br>所以称命令模式为“具现化方法调用”，意思是方法调用被存储在对象中。<br>类似C#里的回调<br>把一个对象传递到方法中，让方法内部解析。</p><p>下面是一个C#版本的角色控制，传入一个角色，就能调用对应的各种行动。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 命令基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Command</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">BaseCharacter character</span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 跳的命令</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JumpCommand</span> : <span class="title">Command</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">BaseCharacter character</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        character.Jump();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 射击的命令</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FireCommand</span> : <span class="title">Command</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">BaseCharacter character</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        character.Fire();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移动的命令</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoveCommand</span> : <span class="title">Command</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">BaseCharacter character</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 对输入的解析</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InputHandler</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JumpCommand buttonA;</span><br><span class="line">    <span class="keyword">private</span> FireCommand buttonD;</span><br><span class="line">    <span class="keyword">private</span> MoveCommand buttonW;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Command <span class="title">HandleInputAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A)) { <span class="keyword">return</span> buttonA; }</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.D)) { <span class="keyword">return</span> buttonD; }</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.W)) { <span class="keyword">return</span> buttonW; }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Player mPlayer;</span><br><span class="line">    <span class="keyword">private</span> Enemy mEnemy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Command</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Command command = HandleInputAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (command != <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            command.Execute(mPlayer);</span><br><span class="line">            command.Execute(mEnemy);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">BaseCharacter</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fire</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">base</span>.Fire();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Jump</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">base</span>.Jump();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Enemy</span> : <span class="title">BaseCharacter</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fire</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">base</span>.Fire();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 角色的基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseCharacter</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Jump</span>(<span class="params"></span>)</span> { }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fire</span>(<span class="params"></span>)</span> { }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式：命令模式&quot;&gt;&lt;a href=&quot;#设计模式：命令模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式：命令模式&quot;&gt;&lt;/a&gt;设计模式：命令模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;命令模式在GoF中的定义是：&lt;/strong&gt;&lt;/p&gt;
&lt;block</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_状态模式</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-13T11:49:11.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式：状态模式（有限、分层和下推状态机）"><a href="#设计模式：状态模式（有限、分层和下推状态机）" class="headerlink" title="设计模式：状态模式（有限、分层和下推状态机）"></a>设计模式：状态模式（有限、分层和下推状态机）</h1><p>实现了最简单的有限状态机</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FSM</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> MonoStateMachine monoStateMachine = <span class="keyword">new</span> MonoStateMachine();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RunState RunState;</span><br><span class="line">    <span class="keyword">public</span> IdleState IdleState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        monoStateMachine.StartState(RunState);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        monoStateMachine.Update();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RunState</span> : <span class="title">MonoState</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RunState instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RunState <span class="title">Instance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            instance = <span class="keyword">new</span> RunState();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"进入跑步"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"开始跑步"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"退出跑步"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IdleState</span> : <span class="title">MonoState</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdleState instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IdleState <span class="title">Instance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            instance = <span class="keyword">new</span> IdleState();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonoState</span> </span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Enter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonoStateMachine</span></span><br><span class="line">{</span><br><span class="line">   <span class="comment">// private MonoState mOwner;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MonoState mCurrentState;</span><br><span class="line">    <span class="keyword">private</span> MonoState mPreviousState;</span><br><span class="line">    <span class="keyword">private</span> MonoState mGlobalState;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MonoStateMachine</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        mCurrentState = <span class="literal">null</span>;</span><br><span class="line">        mPreviousState = <span class="literal">null</span>;</span><br><span class="line">        mGlobalState = <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置初始状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="state"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartState</span>(<span class="params">MonoState state</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        mCurrentState = state <span class="keyword">as</span> MonoState;</span><br><span class="line">        mCurrentState.Enter();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeState</span>(<span class="params">MonoState state</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (state == <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            Debug.Log(<span class="string">"无法找到此状态"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        mPreviousState = mCurrentState;</span><br><span class="line">        mCurrentState.Exit();</span><br><span class="line">        <span class="comment">//转换后</span></span><br><span class="line">        mCurrentState = state <span class="keyword">as</span> MonoState;</span><br><span class="line">        mCurrentState.Enter();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 还原之前的状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RevertToPreviouState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        ChangeState(mPreviousState);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 得到当前状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MonoState <span class="title">GetCurrentState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">return</span> mCurrentState;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 得到之前的状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MonoState <span class="title">GetPreviousState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">return</span> mPreviousState;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (mCurrentState!=<span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            mCurrentState.Execute();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式：状态模式（有限、分层和下推状态机）&quot;&gt;&lt;a href=&quot;#设计模式：状态模式（有限、分层和下推状态机）&quot; class=&quot;headerlink&quot; title=&quot;设计模式：状态模式（有限、分层和下推状态机）&quot;&gt;&lt;/a&gt;设计模式：状态模式（有限、分层和下推状态</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_单例</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E5%8D%95%E4%BE%8B/</id>
    <published>2019-08-13T11:48:30.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><ul><li>单例为最常见的一种设计模式，目前在用的主要有两种方式，一种是基于Unity的，一种是基于C#的</li><li>一般来说，unity里的单例分为两种，一种是继承于Monobehaviour的，一种是不继承于它的；</li><li>这里给出了两种实现方法</li></ul><p><strong>使用Unity里的方法</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public abstract class ScriptSingleton&lt;T&gt;  : MonoBehaviour where T : ScriptSingleton&lt;T&gt;</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">static</span> T _instance;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">//从场景中找T脚本的对象</span></span><br><span class="line">                    _instance = FindObjectOfType&lt;T&gt;();</span><br><span class="line">                    <span class="keyword">if</span> (FindObjectsOfType&lt;T&gt;().Length &gt; <span class="number">1</span>)</span><br><span class="line">                    {</span><br><span class="line">                        Debug.LogError(<span class="string">"场景中的单例脚本数量 &gt; 1:"</span> + _instance.GetType().ToString());</span><br><span class="line">                        <span class="keyword">return</span> _instance;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">//场景中找不到的情况</span></span><br><span class="line">                    <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">string</span> instanceName = <span class="keyword">typeof</span>(T).Name;</span><br><span class="line">                        GameObject instanceGO = GameObject.Find(instanceName);</span><br><span class="line">                        <span class="keyword">if</span> (instanceGO == <span class="literal">null</span>)</span><br><span class="line">                        {</span><br><span class="line">                            instanceGO = <span class="keyword">new</span> GameObject(instanceName);</span><br><span class="line">                            DontDestroyOnLoad(instanceGO);</span><br><span class="line">                            _instance = instanceGO.AddComponent&lt;T&gt;();</span><br><span class="line">                            DontDestroyOnLoad(_instance);</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        {</span><br><span class="line">                            <span class="comment">//场景中已存在同名游戏物体时就打印提示</span></span><br><span class="line">                            Debug.LogError(<span class="string">"场景中已存在单例:"</span> + instanceGO.name);</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> _instance;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            _instance = <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>通过反射实现的单例</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Singleton&lt;T&gt; where T : Singleton&lt;T&gt; </span><br><span class="line">{ </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> T mInstance = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Singleton</span>(<span class="params"></span>)</span> { }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance </span><br><span class="line">    { </span><br><span class="line">        <span class="keyword">get</span> </span><br><span class="line">        { </span><br><span class="line">            <span class="keyword">if</span> (mInstance == <span class="literal">null</span>)</span><br><span class="line">            {</span><br><span class="line">                 <span class="keyword">var</span> ctors = <span class="keyword">typeof</span>(T).GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic);  </span><br><span class="line">                <span class="keyword">var</span> ctor = Array.Find(ctors, c =&gt; c.GetParameters().Length == <span class="number">0</span>); </span><br><span class="line">                <span class="keyword">if</span> (ctor == <span class="literal">null</span>) </span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Non-public ctor() not found!"</span>); </span><br><span class="line">                }</span><br><span class="line">                 mInstance = ctor.Invoke(<span class="literal">null</span>) <span class="keyword">as</span> T; }</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> mInstance;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单例&quot;&gt;&lt;a href=&quot;#单例&quot; class=&quot;headerlink&quot; title=&quot;单例&quot;&gt;&lt;/a&gt;单例&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;单例为最常见的一种设计模式，目前在用的主要有两种方式，一种是基于Unity的，一种是基于C#的&lt;/li&gt;
&lt;li&gt;一般来说，un</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Stencil_Test</title>
    <link href="http://yoursite.com/2019/08/10/Stencil-Test/"/>
    <id>http://yoursite.com/2019/08/10/Stencil-Test/</id>
    <published>2019-08-10T09:13:45.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h4 id="模板测试-Stencil-Test-相关"><a href="#模板测试-Stencil-Test-相关" class="headerlink" title="模板测试(Stencil Test)相关"></a>模板测试(Stencil Test)相关</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>模板测试一般发生在深度测试前，在片段着色器处理完一个片段后执行。和深度测试一样也会丢弃片元。模板测试是根据一个缓冲来进行的，它叫做模板缓冲(Stencil Buffer)</p><p>一个模板缓冲中，（通常）每个模板值(Stencil Value)是8位的。所以每个像素/片段一共能有256种不同的模板值。我们可以将这些模板值设置为我们想要的值，然后当某一个片段有某一个模板值的时候，我们就可以选择丢弃或是保留这个片段了。</p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><p>模板缓冲操作允许我们在渲染片段时将模板缓冲设定为一个特定的值。通过在渲染时修改模板缓冲的内容，我们写入了模板缓冲。在同一个（或者接下来的）渲染迭代中，我们可以读取这些值，来决定丢弃还是保留某个片段。使用模板缓冲的时候你可以尽情发挥，但大体的步骤如下：</p><ul><li>启用模板缓冲的写入。</li><li>渲染物体，更新模板缓冲的内容。</li><li>禁用模板缓冲的写入。</li><li>渲染（其它）物体，这次根据模板缓冲的内容丢弃特定的片段。</li></ul><p>所以，通过使用模板缓冲，我们可以根据场景中已绘制的其它物体的片段，来决定是否丢弃特定的片段。</p><h5 id="具体案例"><a href="#具体案例" class="headerlink" title="具体案例"></a>具体案例</h5><p>一般来说，stencil完整的语法如下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stencil</span><br><span class="line">{</span><br><span class="line">    Ref referenceValue</span><br><span class="line">    ReadMask  readMask</span><br><span class="line">    WriteMask writeMask</span><br><span class="line">    Comp comparisonFunction</span><br><span class="line">    Pass stencilOperation</span><br><span class="line">    Fail stencilOperation</span><br><span class="line">    ZFail stencilOperation</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们可以用模板缓冲来实现一个物体轮廓，步骤如下：</p><ol><li>在绘制（需要添加轮廓的）物体之前，将模板函数设置为GL_ALWAYS，每当物体的片段被渲染时，将模板缓冲更新为1。</li><li>渲染物体。</li><li>禁用模板写入以及深度测试。</li><li>将每个物体缩放一点点。</li><li>使用一个不同的片段着色器，输出一个单独的（边框）颜色。</li><li>再次绘制物体，但只在它们片段的模板值不等于1时才绘制。</li><li>再次启用模板写入和深度测试。</li></ol><p>这个过程将每个物体的片段的模板缓冲设置为1，当我们想要绘制边框的时候，我们主要绘制放大版本的物体中模板测试通过的部分，也就是物体的边框的位置。我们主要使用模板缓冲丢弃了放大版本中属于原物体片段的部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;模板测试-Stencil-Test-相关&quot;&gt;&lt;a href=&quot;#模板测试-Stencil-Test-相关&quot; class=&quot;headerlink&quot; title=&quot;模板测试(Stencil Test)相关&quot;&gt;&lt;/a&gt;模板测试(Stencil Test)相关&lt;/h4&gt;&lt;</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="图形学" scheme="http://yoursite.com/tags/图形学/"/>
    
  </entry>
  
  <entry>
    <title>Culling</title>
    <link href="http://yoursite.com/2019/08/10/Culling/"/>
    <id>http://yoursite.com/2019/08/10/Culling/</id>
    <published>2019-08-10T09:12:41.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h4 id="面剔除（Culling）"><a href="#面剔除（Culling）" class="headerlink" title="面剔除（Culling）"></a>面剔除（Culling）</h4><p>​    一个3DCube我们最多只能看到3个面，那多余的几个面就能丢弃它，能节省片段着色器的执行数，这就是面剔除（Culling），我们可以分析顶点数据的环绕顺序(Winding Order)来区分正面和背面，而反面在绝大多数情况下是不用渲染的。</p><h5 id="在Unity中Cull有三种用于控制几何体的哪一面会被剔除"><a href="#在Unity中Cull有三种用于控制几何体的哪一面会被剔除" class="headerlink" title="在Unity中Cull有三种用于控制几何体的哪一面会被剔除"></a>在Unity中Cull有三种用于控制几何体的哪一面会被剔除</h5><p><strong>Cull Back || Front || Off</strong></p><ul><li>Cull Back——不渲染多边形的背面（默认）。</li><li>Cull Front——不渲染多边形的正面。这将看到原来被正面遮挡的背面内容。</li><li>Cull Off——禁用剔除，两个面都会被绘制。同于一些特殊的效果。（一般用于绘制比较薄的对象，如：纸）</li></ul><h5 id="默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形。"><a href="#默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形。" class="headerlink" title="默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形。"></a>默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形。</h5><p>观察者所面向的所有三角形顶点就是我们所指定的正确环绕顺序了，而立方体另一面的三角形顶点则是以相反的环绕顺序所渲染的。这样的结果就是，我们所面向的三角形将会是正向三角形，而背面的三角形则是背向三角形。如下图：</p><p><img src="https://i.loli.net/2019/07/18/5d2f478fdbecc46253.png" alt=""></p><p>​    在顶点数据中，我们将两个三角形都以逆时针顺序定义（正面的三角形是1、2、3，背面的三角形也是1、2、3（如果我们从正面看这个三角形的话））。然而，如果从观察者当前视角使用1、2、3的顺序来绘制的话，从观察者的方向来看，背面的三角形将会是以顺时针顺序渲染的。虽然背面的三角形是以逆时针定义的，它现在是以顺时针顺序渲染的了。这正是我们想要剔除（Cull，丢弃）的不可见面了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;面剔除（Culling）&quot;&gt;&lt;a href=&quot;#面剔除（Culling）&quot; class=&quot;headerlink&quot; title=&quot;面剔除（Culling）&quot;&gt;&lt;/a&gt;面剔除（Culling）&lt;/h4&gt;&lt;p&gt;​    一个3DCube我们最多只能看到3个面，那多余的几</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="图形学" scheme="http://yoursite.com/tags/图形学/"/>
    
  </entry>
  
  <entry>
    <title>Blending</title>
    <link href="http://yoursite.com/2019/08/10/Blending/"/>
    <id>http://yoursite.com/2019/08/10/Blending/</id>
    <published>2019-08-10T09:12:19.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h4 id="混合-Blending"><a href="#混合-Blending" class="headerlink" title="混合(Blending)"></a>混合(Blending)</h4><p>混合(Blending)通常是实现物体透明度(Transparency)的一种技术。</p><p>在Unity中提供了渲染队列来实现透明效果，使用SubShader的Queue标签决定渲染队列，索引越小越早渲染。</p><table><thead><tr><th>Background</th><th>索引</th><th>效果</th></tr></thead><tbody><tr><td>Background</td><td>1000</td><td>最先绘制，通常绘制背景</td></tr><tr><td>Geometry</td><td>2000</td><td>默认</td></tr><tr><td>AlphaTest</td><td>2450</td><td>需要透明度测试使用此队列</td></tr><tr><td>Transparent</td><td>3000</td><td>从后往前渲染，透明度混合使用此队列</td></tr><tr><td>Overlay</td><td>4000</td><td>实现叠加效果</td></tr></tbody></table><p>Unity中实现物体透明分全透明和半透明两种：</p><ol><li><p>透明度测试（全透明），给定一个值，不满足条件的都将被舍弃</p><p>函数： void clip (float x)</p><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clip(float x);</span><br><span class="line">if(x&lt;0.5f){  //舍弃小于0.5的片元</span><br><span class="line">    discard;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>透明度混合（半透明），Blend是Unity提供的设置混合模式的命令。想要实现半透明的效果就需要把当前自身的颜色和已经存在的颜色缓冲中的颜色值进行混合。</p><p>一般的混合都是通过以下方程来实现：</p><p><img src="https://i.loli.net/2019/07/13/5d29cc8754c2f30953.png" alt=""></p><ul><li>C source：源颜色向量。这是源自纹理的颜色向量。</li><li>C destination：目标颜色向量。这是当前储存在颜色缓冲中的颜色向量。</li><li>F source：源因子值。指定了alpha值对源颜色的影响。</li><li>F destination：目标因子值。指定了alpha值对目标颜色的影响。</li></ul><p>例如：要实现红和绿两种颜色的混合</p><p><img src="https://i.loli.net/2019/07/13/5d29cd84b9aa434910.png" alt=""></p><p>结果就是重叠方形的片段包含了一个60%绿色，40%红色的一种脏兮兮的颜色：</p><p><img src="https://i.loli.net/2019/07/13/5d29cdb288de887569.png" alt=""></p></li></ol><p>​        要想让混合在多个物体上工作，我们需要最先绘制最远的物体，最后绘制最近的物体。普通不需要混合的物体仍然可以使用深度缓冲正常绘制，所以它们不需要排序。但我们仍要保证它们在绘制（排序的）透明物体之前已经绘制完毕了。当绘制一个有不透明和透明物体的场景的时候，大体的原则如下：</p><ol><li>先绘制所有不透明的物体。</li><li>对所有透明的物体排序。</li><li>按顺序绘制所有透明的物体。</li></ol><p>在Unity中为了得到透明物体的排序我们需要开启深度写入，但这会使透明无法进行，所以需要两个Pass来渲染，第一个开启深度写入，但不输出颜色，第二个Pass进行正常的透明度混合。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pass{</span><br><span class="line">    ZWrite On</span><br><span class="line">    ColorMask 0</span><br><span class="line">}</span><br><span class="line">Pass{</span><br><span class="line">    //混合颜色</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;混合-Blending&quot;&gt;&lt;a href=&quot;#混合-Blending&quot; class=&quot;headerlink&quot; title=&quot;混合(Blending)&quot;&gt;&lt;/a&gt;混合(Blending)&lt;/h4&gt;&lt;p&gt;混合(Blending)通常是实现物体透明度(Transpare</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="图形学" scheme="http://yoursite.com/tags/图形学/"/>
    
  </entry>
  
  <entry>
    <title>Unity记录</title>
    <link href="http://yoursite.com/2019/07/17/Unity%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/07/17/Unity%E8%AE%B0%E5%BD%95/</id>
    <published>2019-07-17T10:06:46.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>相同的材质，属性不同，避免创建新的材质</p><p><strong>MaterialPropertyBlock</strong></p></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//会创建一个新的材质</span><br><span class="line">meshRenderer.material.color = clolr;</span><br><span class="line">//不会创建一个新的材质</span><br><span class="line">var propertyBlock = new MaterialPropertyBlock();</span><br><span class="line">propertyBlock.SetColor("_Color", color);</span><br><span class="line">meshRenderer.SetPropertyBlock(propertyBlock);</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;相同的材质，属性不同，避免创建新的材质&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MaterialPropertyBlock&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;</summary>
      
    
    
    
    <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
    <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>ZTest</title>
    <link href="http://yoursite.com/2019/07/12/ZTest/"/>
    <id>http://yoursite.com/2019/07/12/ZTest/</id>
    <published>2019-07-12T07:14:15.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深度测试相关（ZTest）"><a href="#深度测试相关（ZTest）" class="headerlink" title="深度测试相关（ZTest）"></a>深度测试相关（ZTest）</h3><p>在不使用深度测试的时候，如果我们先绘制一个距离较近的物体，再绘制距离较远的物体，则距离远的物体因为后绘制，会把距离近的物体覆盖掉，这样的效果并不是我们所希望的。而有了深度缓冲以后，绘制物体的顺序就不那么重要了，都能按照远近（Z值）正常显示，这很关键。</p><h4 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h4><p>深度为该像素点离摄像机的距离（z值），存在深度缓冲中，通常会以16、24、32位float来存储，精度越高越精确。通常为24位</p><h4 id="深度测试"><a href="#深度测试" class="headerlink" title="深度测试"></a>深度测试</h4><p>将该像素点的z值对比G-Buffer的值，通过则更新为新的深度值，测试失败则丢弃该片段</p><h4 id="深度缓冲"><a href="#深度缓冲" class="headerlink" title="深度缓冲"></a>深度缓冲</h4><p>深度缓冲中存着深度数据，由于深度缓冲是在片段着色器运行后在屏幕空间进行，现在大部分的GPU都提供一个叫做提前深度测试(Early Depth Testing)的硬件特性。提前深度测试允许深度测试在片段着色器之前运行。只要我们清楚一个片段永远不会是可见的（它在其他物体之后），我们就能提前丢弃这个片段。</p><h4 id="深度值精度"><a href="#深度值精度" class="headerlink" title="深度值精度"></a>深度值精度</h4><p>深度缓冲包含一个介于0.0和1.0之前的值，里面存着深度值为距离摄像机的距离，但几乎永远不会使用这样的线性深度缓冲(Linear Depth Buffer)的。要想有正确的投影性质，需要使用一个非线性的深度方程，它是与 1/z 成正比的。它做的就是在z值很小的时候提供非常高的精度，而在z值很远的时候提供更少的精度。这样才能更大的利用深度值的精度。</p><p>由于非线性方程与 1/z 成正比，在1.0和2.0之间的z值将会变换至1.0到0.5之间的深度值，这就是一个float提供给我们的一半精度了，这在z值很小的情况下提供了非常大的精度。在50.0和100.0之间的z值将会只占2%的float精度，这正是我们所需要的。这样的一个考虑了远近距离的方程是这样的：</p><p><img src="https://i.loli.net/2019/07/09/5d24b2e0ecc0249057.png" alt=""></p><p>变成图大概是这样</p><p><img src="https://i.loli.net/2019/07/09/5d24b30817a6873744.png" alt=""></p><h4 id="深度冲突"><a href="#深度冲突" class="headerlink" title="深度冲突"></a>深度冲突</h4><p>一个很常见的错误是俩个平面紧密贴在一起时，深度缓冲没有足够的精度来决定谁在前面，就会出现交替闪烁的现象，叫深度冲突(Z-fighting)</p><p>抗深度冲突技术中，最简单的就是使用更高的精度深度缓冲，会牺牲掉一些性能，却能获得更好的效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;深度测试相关（ZTest）&quot;&gt;&lt;a href=&quot;#深度测试相关（ZTest）&quot; class=&quot;headerlink&quot; title=&quot;深度测试相关（ZTest）&quot;&gt;&lt;/a&gt;深度测试相关（ZTest）&lt;/h3&gt;&lt;p&gt;在不使用深度测试的时候，如果我们先绘制一个距离较近的</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="图形学" scheme="http://yoursite.com/tags/图形学/"/>
    
  </entry>
  
  <entry>
    <title>简单UI框架</title>
    <link href="http://yoursite.com/2019/07/09/%E7%AE%80%E5%8D%95UI%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/07/09/%E7%AE%80%E5%8D%95UI%E6%A1%86%E6%9E%B6/</id>
    <published>2019-07-09T02:18:04.000Z</published>
    <updated>2023-02-17T15:32:30.102Z</updated>
    
    <content type="html"><![CDATA[<p>简单的UI框架，方便以后复制</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IL</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> UILevel</span><br><span class="line">    {</span><br><span class="line">        Bottom,<span class="comment">//底层</span></span><br><span class="line">        Common, <span class="comment">//普通层</span></span><br><span class="line">        Top,<span class="comment">//最前层</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public class UIMgr : ASingleton&lt;UIMgr&gt;</span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Dictionary&lt;<span class="keyword">string</span>, PanelView&gt; mAllPanel = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, PanelView&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Transform mBottomTrans;</span><br><span class="line">        <span class="keyword">private</span> Transform mCommonTrans;</span><br><span class="line">        <span class="keyword">private</span> Transform mTopTrans;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Canvas mCanvas;</span><br><span class="line">        <span class="keyword">private</span> CanvasScaler mCanvasScaler;</span><br><span class="line">        <span class="keyword">private</span> GraphicRaycaster mGraphicRaycaster;</span><br><span class="line">        <span class="keyword">private</span> RectTransform mRectTransform;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> EventSystem mEventSystem;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Transform UIRoot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            UIRoot = GameObject.Instantiate(ResMgr.Ins.Load&lt;GameObject&gt;(AssetBundleName.UI,<span class="string">"uiroot"</span>)).transform;</span><br><span class="line">            GameObject.DontDestroyOnLoad(UIRoot);</span><br><span class="line"></span><br><span class="line">            mBottomTrans = UIRoot.Find(<span class="string">"Bottom"</span>);</span><br><span class="line">            mCommonTrans = UIRoot.Find(<span class="string">"Common"</span>);</span><br><span class="line">            mTopTrans = UIRoot.Find(<span class="string">"Top"</span>);</span><br><span class="line"></span><br><span class="line">            mCanvas = UIRoot.GetComponent&lt;Canvas&gt;();</span><br><span class="line">            mCanvasScaler = UIRoot.GetComponent&lt;CanvasScaler&gt;();</span><br><span class="line">            mGraphicRaycaster = UIRoot.GetComponent&lt;GraphicRaycaster&gt;();</span><br><span class="line">            mRectTransform = UIRoot.GetComponent&lt;RectTransform&gt;();</span><br><span class="line"></span><br><span class="line">            mEventSystem = UIRoot.Find(<span class="string">"EventSystem"</span>).GetComponent&lt;EventSystem&gt;();</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> RectTransform RectTransform</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">get</span> { <span class="keyword">return</span> mRectTransform; }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> GraphicRaycaster GraphicRaycaster</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">get</span> { <span class="keyword">return</span> mGraphicRaycaster; }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Canvas RootCanvas</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">get</span> { <span class="keyword">return</span> mCanvas; }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 设置分辨率</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="width"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="height"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetResolution</span>(<span class="params"><span class="keyword">int</span> width, <span class="keyword">int</span> height</span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            mCanvasScaler.referenceResolution = <span class="keyword">new</span> Vector2(width, height);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> T OpenUI&lt;T&gt;(<span class="keyword">string</span> PanelName, UILevel uiLevel) <span class="keyword">where</span> T:PanelView</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (!mAllPanel.ContainsKey(PanelName))</span><br><span class="line">            {</span><br><span class="line">                CreateUI(<span class="keyword">typeof</span>(T), PanelName, uiLevel);</span><br><span class="line">            }</span><br><span class="line">            mAllPanel[PanelName].SetActive(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> mAllPanel[PanelName]<span class="keyword">as</span> T;</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> OpenUIAsync&lt;T&gt;(<span class="keyword">string</span> PanelName, Action&lt;UnityEngine.Object&gt; onLoaded = <span class="literal">null</span>) <span class="keyword">where</span> T : PanelView, <span class="keyword">new</span>()</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (!mAllPanel.ContainsKey(PanelName))</span><br><span class="line">            {</span><br><span class="line">                CreateUIAsync&lt;T&gt;(PanelName,onLoaded);</span><br><span class="line">            }</span><br><span class="line">            onLoaded(<span class="literal">null</span>);</span><br><span class="line">           <span class="comment">// return mAllPanel[PanelName];</span></span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> CreateUIAsync&lt;T&gt;(<span class="keyword">string</span> panelName, Action&lt;UnityEngine.Object&gt; onLoaded) <span class="keyword">where</span> T : PanelView, <span class="keyword">new</span>()</span><br><span class="line">        {</span><br><span class="line">            ResMgr.Ins.LoadAsync(AssetBundleName.UI, panelName,onLoaded);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateUI</span>(<span class="params">Type type, <span class="keyword">string</span> panelName, UILevel uiLevel</span>) </span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            PanelView panelView = Activator.CreateInstance(type) <span class="keyword">as</span> PanelView;</span><br><span class="line"></span><br><span class="line">            Transform parent;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (uiLevel)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">case</span> UILevel.Bottom:</span><br><span class="line">                    parent = mBottomTrans;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> UILevel.Common:</span><br><span class="line">                    parent = mCommonTrans;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> UILevel.Top:</span><br><span class="line">                    parent = mTopTrans;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    parent = mCommonTrans;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            GameObject ui = GameObject.Instantiate(ResMgr.Ins.Load&lt;GameObject&gt;(AssetBundleName.UI, panelName), parent);</span><br><span class="line">            ui.name = panelName;</span><br><span class="line">            panelView.SetGameObject(ui);</span><br><span class="line">            panelView.Init();</span><br><span class="line">            mAllPanel.Add(panelName, panelView);</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ViewType Open&lt;ViewType&gt;(UILevel uiLevel = UILevel.Common) <span class="keyword">where</span> ViewType : PanelView</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> OpenUI&lt;ViewType&gt;( GetName&lt;ViewType&gt;(), uiLevel);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> OpenAsync&lt;T&gt;( Action&lt;UnityEngine.Object&gt; onLoaded = <span class="literal">null</span>) </span><br><span class="line">        {</span><br><span class="line">            OpenUIAsync&lt;PanelView&gt;(GetName&lt;T&gt;(), onLoaded);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> GetName&lt;T&gt;()</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (Runtime.Ins.IsHotResProject)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">string</span> name = <span class="keyword">typeof</span>(T).ToString();</span><br><span class="line">                <span class="keyword">return</span> name.Replace(<span class="string">"Type : "</span>, <span class="string">""</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">string</span> name = <span class="keyword">typeof</span>(T).ToString();</span><br><span class="line">                <span class="keyword">string</span>[] nameSplits = name.Split(<span class="string">'.'</span>);</span><br><span class="line">                <span class="keyword">return</span> nameSplits[nameSplits.Length - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//return name;</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单的UI框架，方便以后复制&lt;/p&gt;
&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
    <category term="UI" scheme="http://yoursite.com/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>LearnOpenGL(2)</title>
    <link href="http://yoursite.com/2019/06/17/LearnOpenGL-2/"/>
    <id>http://yoursite.com/2019/06/17/LearnOpenGL-2/</id>
    <published>2019-06-17T08:00:02.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>颜色向量(Color Vector)</strong>：一个通过红绿蓝(RGB)分量的组合描绘大部分真实颜色的向量。一个物体的颜色实际上是该物体所不能吸收的反射颜色分量。</li><li><strong>冯氏光照模型(Phong Lighting Model)</strong>：一个通过计算环境光，漫反射，和镜面光分量的值来估计真实光照的模型。</li><li><strong>环境光照(Ambient Lighting)</strong>：通过给每个没有被光照的物体很小的亮度，使其不是完全黑暗的，从而对全局光照进行估计。</li><li><strong>漫反射着色(Diffuse Shading)</strong>：一个顶点/片段与光线方向越接近，光照会越强。使用了法向量来计算角度。</li><li><strong>法向量(Normal Vector)</strong>：一个垂直于平面的单位向量。</li><li><strong>法线矩阵(Normal Matrix)</strong>：一个3x3矩阵，或者说是没有平移的模型（或者模型-观察）矩阵。它也被以某种方式修改（逆转置），从而在应用非统一缩放时，保持法向量朝向正确的方向。否则法向量会在使用非统一缩放时被扭曲。</li><li><strong>镜面光照(Specular Lighting)</strong>：当观察者视线靠近光源在表面的反射线时会显示的镜面高光。镜面光照是由观察者的方向，光源的方向和设定高光分散量的反光度值三个量共同决定的。</li><li><strong>冯氏着色(Phong Shading)</strong>：冯氏光照模型应用在片段着色器。</li><li><strong>Gouraud着色(Gouraud shading)</strong>：冯氏光照模型应用在顶点着色器上。在使用很少数量的顶点时会产生明显的瑕疵。会得到效率提升但是损失了视觉质量。</li><li><strong>GLSL结构体(GLSL struct)</strong>：一个类似于C的结构体，用作着色器变量的容器。大部分时间用来管理输入/输出/uniform。</li><li><strong>材质(Material)</strong>：一个物体反射的环境光，漫反射，镜面光颜色。这些东西设定了物体所拥有的颜色。</li><li><strong>光照属性(Light(properties))</strong>：一个光的环境光，漫反射，镜面光的强度。可以使用任何颜色值，对每一个冯氏分量(Phong Component)定义光源发出的颜色/强度。</li><li><strong>漫反射贴图(Diffuse Map)</strong>：一个设定了每个片段中漫反射颜色的纹理图片。</li><li><strong>镜面光贴图(Specular Map)</strong>：一个设定了每一个片段的镜面光强度/颜色的纹理贴图。仅在物体的特定区域显示镜面高光。</li><li><strong>定向光(Directional Light)</strong>：只有一个方向的光源。它被建模为不管距离有多长所有光束都是平行而且其方向向量在整个场景中保持不变。</li><li><strong>点光源(Point Light)</strong>：一个在场景中有位置的，光线逐渐衰减的光源。</li><li><strong>衰减(Attenuation)</strong>：光随着距离减少强度的过程，通常使用在点光源和聚光下。</li><li><strong>聚光(Spotlight)</strong>：一个被定义为在某一个方向上的锥形的光源。</li><li><strong>手电筒(Flashlight)</strong>：一个摆放在观察者视角的聚光。</li><li><strong>GLSL uniform数组(GLSL Uniform Array)</strong>：一个uniform值数组。它的工作原理和C语言数组大致一样，只是不能动态分配内存。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;颜色向量(Color Vector)&lt;/strong&gt;：一个通过红绿蓝(RGB)分量的组合描绘大部分真实颜色的向量。一个物体的颜色实际上是该物体所不能吸收的反射颜色分量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;冯氏光照模型(Phong Lightin</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>LearnOpenGL-1</title>
    <link href="http://yoursite.com/2019/06/12/LearnOpenGL-1/"/>
    <id>http://yoursite.com/2019/06/12/LearnOpenGL-1/</id>
    <published>2019-06-12T10:48:02.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>OpenGL</strong>： 一个定义了函数布局和输出的图形API的正式规范。</li><li><strong>GLAD</strong>： 一个拓展加载库，用来为我们加载并设定所有OpenGL函数指针，从而让我们能够使用所有（现代）OpenGL函数。</li><li><strong>视口(Viewport)</strong>： 我们需要渲染的窗口。</li><li><strong>图形管线(Graphics Pipeline)</strong>： 一个顶点在呈现为像素之前经过的全部过程。</li><li><strong>着色器(Shader)</strong>： 一个运行在显卡上的小型程序。很多阶段的图形管道都可以使用自定义的着色器来代替原有的功能。</li><li><strong>标准化设备坐标(Normalized Device Coordinates, NDC)</strong>： 顶点在通过在剪裁坐标系中剪裁与透视除法后最终呈现在的坐标系。所有位置在NDC下-1.0到1.0的顶点将不会被丢弃并且可见。</li><li><strong>顶点缓冲对象(Vertex Buffer Object)</strong>： 一个调用显存并存储所有顶点数据供显卡使用的缓冲对象。</li><li><strong>顶点数组对象(Vertex Array Object)</strong>： 存储缓冲区和顶点属性状态。</li><li><strong>索引缓冲对象(Element Buffer Object)</strong>： 一个存储索引供索引化绘制使用的缓冲对象。</li><li><strong>Uniform</strong>： 一个特殊类型的GLSL变量。它是全局的（在一个着色器程序中每一个着色器都能够访问uniform变量），并且只需要被设定一次。</li><li><strong>纹理(Texture)</strong>： 一种包裹着物体的特殊类型图像，给物体精细的视觉效果。</li><li><strong>纹理缠绕(Texture Wrapping)</strong>： 定义了一种当纹理顶点超出范围(0, 1)时指定OpenGL如何采样纹理的模式。</li><li><strong>纹理过滤(Texture Filtering)</strong>： 定义了一种当有多种纹素选择时指定OpenGL如何采样纹理的模式。这通常在纹理被放大情况下发生。</li><li><strong>多级渐远纹理(Mipmaps)</strong>： 被存储的材质的一些缩小版本，根据距观察者的距离会使用材质的合适大小。</li><li><strong>stb_image.h</strong>： 图像加载库。</li><li><strong>纹理单元(Texture Units)</strong>： 通过绑定纹理到不同纹理单元从而允许多个纹理在同一对象上渲染。</li><li><strong>向量(Vector)</strong>： 一个定义了在空间中方向和/或位置的数学实体。</li><li><strong>矩阵(Matrix)</strong>： 一个矩形阵列的数学表达式。</li><li><strong>GLM</strong>： 一个为OpenGL打造的数学库。</li><li><strong>局部空间(Local Space)</strong>： 一个物体的初始空间。所有的坐标都是相对于物体的原点的。</li><li><strong>世界空间(World Space)</strong>： 所有的坐标都相对于全局原点。</li><li><strong>观察空间(View Space)</strong>： 所有的坐标都是从摄像机的视角观察的。</li><li><strong>裁剪空间(Clip Space)</strong>： 所有的坐标都是从摄像机视角观察的，但是该空间应用了投影。这个空间应该是一个顶点坐标最终的空间，作为顶点着色器的输出。OpenGL负责处理剩下的事情（裁剪/透视除法）。</li><li><strong>屏幕空间(Screen Space)</strong>： 所有的坐标都由屏幕视角来观察。坐标的范围是从0到屏幕的宽/高。</li><li><strong>LookAt矩阵</strong>： 一种特殊类型的观察矩阵，它创建了一个坐标系，其中所有坐标都根据从一个位置正在观察目标的用户旋转或者平移。</li><li><strong>欧拉角(Euler Angles)</strong>： 被定义为偏航角(Yaw)，俯仰角(Pitch)，和滚转角(Roll)从而允许我们通过这三个值构造任何3D方向。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OpenGL&lt;/strong&gt;： 一个定义了函数布局和输出的图形API的正式规范。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GLAD&lt;/strong&gt;： 一个拓展加载库，用来为我们加载并设定所有OpenGL函数指针，从而让我们能够使用所有（现代）Ope</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>虚拟遥感</title>
    <link href="http://yoursite.com/2019/06/06/%E8%99%9A%E6%8B%9F%E9%81%A5%E6%84%9F/"/>
    <id>http://yoursite.com/2019/06/06/%E8%99%9A%E6%8B%9F%E9%81%A5%E6%84%9F/</id>
    <published>2019-06-06T08:26:12.000Z</published>
    <updated>2023-02-17T15:32:30.102Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameKit</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Joystick</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Header(<span class="meta-string">"摇杆最大半径(UGUI)"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> maxRadius = <span class="number">0</span>;</span><br><span class="line">        [<span class="meta">Header(<span class="meta-string">"摇杆最小半径(UGUI)"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> minRadius = <span class="number">0</span>;</span><br><span class="line">        [<span class="meta">Header(<span class="meta-string">"摇杆框"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> Transform stickBorder;</span><br><span class="line">        [<span class="meta">Header(<span class="meta-string">"摇杆"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> Transform stick;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 绑定的相机</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">HideInInspector</span>]</span><br><span class="line">        <span class="keyword">public</span> Camera camera;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 触摸的起始位置</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        Vector2 _touchStartPos;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 摇杆起始位置</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        Vector3 _stickBorderInitPos;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 当Stick的值改变时触发</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Vector2&gt; onValueChange;</span><br><span class="line"></span><br><span class="line">        List&lt;KeyCode&gt; _pressedKeyCode = <span class="keyword">new</span> List&lt;KeyCode&gt;();</span><br><span class="line"></span><br><span class="line">        Vector2 _lastValue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> _isStickMode = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        CanvasGroup stickBorderGroup;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            _stickBorderInitPos = stickBorder.position;</span><br><span class="line">            stickBorderGroup = stickBorder.gameObject.GetComponent&lt;CanvasGroup&gt;();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            <span class="keyword">if</span> (_isStickMode == <span class="literal">false</span>)</span><br><span class="line">            {</span><br><span class="line">                CheckKeyPress(KeyCode.UpArrow);</span><br><span class="line">                CheckKeyPress(KeyCode.DownArrow);</span><br><span class="line">                CheckKeyPress(KeyCode.LeftArrow);</span><br><span class="line">                CheckKeyPress(KeyCode.RightArrow);</span><br><span class="line"></span><br><span class="line">                CheckKeyRelease(KeyCode.UpArrow);</span><br><span class="line">                CheckKeyRelease(KeyCode.DownArrow);</span><br><span class="line">                CheckKeyRelease(KeyCode.LeftArrow);</span><br><span class="line">                CheckKeyRelease(KeyCode.RightArrow);</span><br><span class="line"></span><br><span class="line">                Vector2 tempValue = Vector2.zero;</span><br><span class="line">                <span class="keyword">if</span> (_pressedKeyCode.Count &gt; <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">switch</span> (_pressedKeyCode[<span class="number">0</span>])</span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">case</span> KeyCode.UpArrow:</span><br><span class="line">                            tempValue = Vector2.up;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> KeyCode.DownArrow:</span><br><span class="line">                            tempValue = Vector2.down;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> KeyCode.LeftArrow:</span><br><span class="line">                            tempValue = Vector2.left;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> KeyCode.RightArrow:</span><br><span class="line">                            tempValue = Vector2.right;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                SetValue(tempValue);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params">Vector2 <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            <span class="keyword">if</span> (_lastValue != <span class="keyword">value</span>)</span><br><span class="line">            {</span><br><span class="line">                _lastValue = <span class="keyword">value</span>;</span><br><span class="line">                onValueChange?.Invoke(_lastValue);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CheckKeyPress</span>(<span class="params">KeyCode keyCode</span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            <span class="keyword">if</span> (Input.GetKeyDown(keyCode))</span><br><span class="line">            {</span><br><span class="line">                _pressedKeyCode.Remove(keyCode);</span><br><span class="line">                _pressedKeyCode.Insert(<span class="number">0</span>, keyCode);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CheckKeyRelease</span>(<span class="params">KeyCode keyCode</span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            <span class="keyword">if</span> (!Input.GetKey(keyCode))</span><br><span class="line">            {</span><br><span class="line">                _pressedKeyCode.Remove(keyCode);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 得到指定GameObject下，鼠标相对的localposition坐标</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="go"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function">Vector2 <span class="title">GetLocalMousePosition</span>(<span class="params">GameObject go</span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> == camera)</span><br><span class="line">            {</span><br><span class="line">               Debug.LogError(<span class="string">"Joystick need binding a camera"</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            Vector2 screenMouse = <span class="keyword">new</span> Vector2(Input.mousePosition.x, Input.mousePosition.y);</span><br><span class="line">            Vector2 localPoint;</span><br><span class="line">            RectTransformUtility.ScreenPointToLocalPointInRectangle(go.GetComponent&lt;RectTransform&gt;(), screenMouse, camera, <span class="keyword">out</span> localPoint);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Debug.LogFormat("Mouse:{0}  Screen:{1}  LocalPoint:{2}", Input.mousePosition, screenMouse, localPoint);</span></span><br><span class="line">            <span class="keyword">return</span> localPoint;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 触摸开始的时候</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="e"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerDown</span>(<span class="params">BaseEventData e</span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            stickBorder.localPosition = GetLocalMousePosition(gameObject);</span><br><span class="line"></span><br><span class="line">            stickBorderGroup.alpha = <span class="number">0.4f</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 滑动开始的时候</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="e"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeginDrag</span>(<span class="params">BaseEventData e</span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            _isStickMode = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            _touchStartPos = GetLocalMousePosition(stickBorder.gameObject);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 滑动中</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="e"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span>(<span class="params">BaseEventData e</span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            Vector2 touchNowPos = GetLocalMousePosition(stickBorder.gameObject);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> moveVector = (touchNowPos - _touchStartPos);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (moveVector.magnitude &lt;= minRadius)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            moveVector = Vector3.ClampMagnitude(moveVector, maxRadius);</span><br><span class="line">           </span><br><span class="line">            stick.localPosition = moveVector;</span><br><span class="line"></span><br><span class="line">            Vector2 <span class="keyword">value</span> = <span class="keyword">new</span> Vector2(moveVector.x, moveVector.y);</span><br><span class="line"></span><br><span class="line">            SetValue(<span class="keyword">value</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 滑动结束的时候</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="e"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEndDrag</span>(<span class="params">BaseEventData e</span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            stick.localPosition = Vector3.zero;</span><br><span class="line">            onValueChange?.Invoke(Vector2.zero);</span><br><span class="line">            _isStickMode = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            ResetStickBorder();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ResetStickBorder</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            stickBorderGroup.alpha = <span class="number">0.0f</span>;</span><br><span class="line">            stickBorder.position = _stickBorderInitPos;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
    <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>TODO</title>
    <link href="http://yoursite.com/2019/06/05/TODO/"/>
    <id>http://yoursite.com/2019/06/05/TODO/</id>
    <published>2019-06-05T07:30:44.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<ol><li>《C++必知必会》</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;《C++必知必会》&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="日常" scheme="http://yoursite.com/categories/日常/"/>
    
    
    <category term="日常" scheme="http://yoursite.com/tags/日常/"/>
    
  </entry>
  
  <entry>
    <title>1.入门</title>
    <link href="http://yoursite.com/2019/06/04/1-%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/06/04/1-%E5%85%A5%E9%97%A8/</id>
    <published>2019-06-04T09:59:12.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="渲染流水线"><a href="#渲染流水线" class="headerlink" title="渲染流水线"></a>渲染流水线</h3><h4 id="坐标转换依次顺序"><a href="#坐标转换依次顺序" class="headerlink" title="坐标转换依次顺序"></a>坐标转换依次顺序</h4><p>Object space 模型空间 </p><p>World space 世界坐标系空间</p><p>Eye space 观察坐标系空间</p><p>Clip and Project space 屏幕坐标空间</p><p>注意： </p><ol><li>光照计算通常在World coordinate space（世界坐标空间）里计算，也可以在Eye space 里计算。</li><li>顶点法向量属于Object space ，转化为World space时，要通过（world matrix）转置矩阵的逆矩阵来转换 （复习线性代数去了）</li></ol><h4 id="Eye-Space"><a href="#Eye-Space" class="headerlink" title="Eye Space"></a>Eye Space</h4><p>以Camera为原点 ，由视线方向、视角和远近平面共同组成一个梯形三维空间，称之为viewing frustum（视锥），超出部分会被裁剪 frustum culling（视锥裁剪）</p><p><img src="https://i.loli.net/2019/06/04/5cf686f0789c270813.png" alt=""></p><h3 id="Project-and-clip-space"><a href="#Project-and-clip-space" class="headerlink" title="Project and clip space"></a>Project and clip space</h3><p>因为在不规则的体（viewing frustum）中进行裁剪并非易事，所以应该是先投影再裁剪具体分为三个步骤：</p><ol><li>用透视变换矩阵把顶点从视锥体中变换到裁剪空间的CVV中；</li><li>在CVV进行图元裁剪；</li><li>屏幕映射：将进过前述过程得到的坐标映射到屏幕坐标系上。</li></ol><ul><li>在第一个步骤里的过程为“投影”，主要投影方法有两种：正交投影和透视投影。</li><li>只有图元完全或部分存在于视锥内部时才需要光栅化。超出部分进行裁剪。</li><li>视点去除可以不用在GPU中进行，可以使用高级语言在CPU上实现，提前可减去GPU负担。</li></ul><h4 id="Primitive-Assemble-amp-amp-Triangle-setup"><a href="#Primitive-Assemble-amp-amp-Triangle-setup" class="headerlink" title="Primitive Assemble&amp;&amp;Triangle setup"></a>Primitive Assemble&amp;&amp;Triangle setup</h4><ul><li>Primitive Assembly，图元装配，即将顶点根据Primitive（原始的连接关系），还原出网格结构。</li><li>涉及到三角形的顶点顺序（三角形的法向量朝向）根据右手来决定三角面片的法向量（逆时针排列），法向量朝向视点为正，如果为反面进行背面去除操作（Back-face-Culling）。</li><li>所有的裁剪剔除都是为了减少需要绘制的顶点个数。</li><li>裁剪算法主要包括：视域剔除（View Frustum Culing）、背面剔除（Back-Face Culling）、遮挡剔除（Occlusing Culling）和视口裁剪等。</li></ul><h4 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h4><p>目前我们拿到了每个点的屏幕坐标值（Screen coordinate），也知道我们需要绘制的图元（点、线、面）但是有两个问题：</p><ol><li>点的屏幕坐标都是浮点数，像素都是由整数表示。（绘制的位置为接近两指定端点的实际线段位置如（10.48，20.51）转化为（10，21）四舍五入 或 加0.5取整）。</li><li>在屏幕上需要绘制的有点、线、面，如何根据两个已经确定位置的2个像素点绘制一条线段，如何根据已经确定了位置的3个像素点绘制一个三角形面片。（区域填充推荐慕课课程<a href="https://www.icourse163.org/course/HUST-1003636001" target="_blank" rel="noopener">大力点击进入</a>）</li></ol><h4 id="Pixel-Operation"><a href="#Pixel-Operation" class="headerlink" title="Pixel Operation"></a>Pixel Operation</h4><p>片元操作：计算出每个像素的颜色值，包括</p><ol><li><p>被遮挡面通过一个被称为深度测试的过程而消除。</p></li><li><p>Texture operatioin，纹理操作，根据像素的纹理坐标，查询对应的纹理值。</p></li><li><p>Blending，混合，根据目前已经画好的颜色，与正在计算的颜色的透明度混合为两种颜色，作为新的颜色输出，通常称之为alpha混合技术。屏幕上的每个像素都关联一个RGB颜色值和一个Z缓冲器深度值，alpha值（可以根据需要生成并存储）。</p><p>从渲染管线得到的RGBA，使用over操作符进行混合：</p><p>，<img src="https://i.loli.net/2019/06/05/5cf698001d1b841551.png" alt=""></p><p>a是透明度值（alpha）Ca表示透明物体的颜色，Cs表示混合前像素的颜色，Cd为最终计算得到的颜色。</p><p>为了绘制透明物体，需要对物体进行排序，用z buffer 首先绘制不透明物体，然后从后往前混合透明物体。</p></li><li><p>Filtering，将正在算的颜色经过某种Filtering（滤波）后输出，可以理解为：经过一种数学运算变成新的颜色值。（如最近邻滤波和线性滤波)</p></li></ol><h4 id="最终像素的颜色写入帧缓存，过程如下图"><a href="#最终像素的颜色写入帧缓存，过程如下图" class="headerlink" title="最终像素的颜色写入帧缓存，过程如下图"></a>最终像素的颜色写入帧缓存，过程如下图</h4><p><img src="https://i.loli.net/2019/06/05/5cf69aa2962f261841.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;渲染流水线&quot;&gt;&lt;a href=&quot;#渲染流水线&quot; class=&quot;headerlink&quot; title=&quot;渲染流水线&quot;&gt;&lt;/a&gt;渲染流水线&lt;/h3&gt;&lt;h4 id=&quot;坐标转换依次顺序&quot;&gt;&lt;a href=&quot;#坐标转换依次顺序&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="图形学" scheme="http://yoursite.com/tags/图形学/"/>
    
  </entry>
  
</feed>
