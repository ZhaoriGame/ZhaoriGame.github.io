<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朝日</title>
  
  <subtitle>ZhaoriGame</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-03-02T06:54:49.277Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhaori</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity 编辑器-内置GUIStyle查看工具</title>
    <link href="http://yoursite.com/2023/03/02/Unity-%E7%BC%96%E8%BE%91%E5%99%A8-%E5%86%85%E7%BD%AEGUIStyle%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2023/03/02/Unity-%E7%BC%96%E8%BE%91%E5%99%A8-%E5%86%85%E7%BD%AEGUIStyle%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7/</id>
    <published>2023-03-02T06:52:10.000Z</published>
    <updated>2023-03-02T06:54:49.277Z</updated>
    
    <content type="html"><![CDATA[<pre><code>using UnityEngine;using UnityEditor;using System.Reflection;/// &lt;summary&gt;/// Unity 自带的 GUIStyle 效果查看器/// &lt;/summary&gt;public class GUIStyleViewerUtil : EditorWindow{    /// &lt;summary&gt;    /// 滑动条    /// &lt;/summary&gt;    private Vector2 mScrollView = Vector2.zero;    /// &lt;summary&gt;    /// 寻找的样式名称    /// &lt;/summary&gt;    private string mSearchStyle = "";    /// &lt;summary&gt;    /// 样式缓存    /// &lt;/summary&gt;    private static GUIStyle mBtnStyle;  [MenuItem("Util/GUIStyle 效果查看器")]  private static void MenuClicked()  {      GetWindow&lt;GUIStyleViewerUtil&gt;("GUIStyle查看器", true);      // 初始化一个按钮的样式      mBtnStyle = GetBtnStyle();  }  private void OnGUI()  {      GUILayout.Space(20);      // 设置一个查找的功能      GUILayout.BeginHorizontal("HelpBox");      GUILayout.Space(20);      mSearchStyle = EditorGUILayout.TextField("", mSearchStyle, "SearchTextField");      GUILayout.Label("", "SearchCancelButtonEmpty");      GUILayout.EndHorizontal();      // 设置滚动栏      mScrollView = GUILayout.BeginScrollView(mScrollView);      // 遍历并显示所有符合条件的 Unity 自带的 GUIStyle      foreach (GUIStyle style in GUI.skin.customStyles)      {          if (style.name.ToLower().Contains(mSearchStyle.ToLower()))          {              GUILayout.Space(10);              // 为了让显示的布局看着更舒服一些，需要以当前 style 为原型新建一个 GUIStyle              // 因为接下来可能会对文字居中等方面进行调整，              // 而如果直接更改原来的 style，则会导致系统中的对应 UI 样式和布局也发生改变              GUIStyle tmp = new GUIStyle(style);              DrawStyleItem(tmp);          }      }      GUILayout.EndScrollView();  }  /// &lt;summary&gt;  /// 绘制对应的 GUIStyle  /// &lt;/summary&gt;  /// &lt;param name="style"&gt;&lt;/param&gt;  private void DrawStyleItem(GUIStyle style)  {      GUILayout.BeginHorizontal("box", GUILayout.Height(style.fixedHeight));      GUILayout.Space(20);      // 获取按钮样式      GUIStyle tmp = mBtnStyle;      // 设置第一个按钮，点击后可以复制当前 GUIStyle 的名字信息      if (GUILayout.Button("&lt;color=#000000FF&gt;复制到剪贴板&lt;/color&gt;", tmp))      {          GUIUtility.systemCopyBuffer = style.name;      }      GUILayout.Space(20);      // 设置第二个按钮，点击后在控制台输出该 GUIStyle 的设置参数      if (GUILayout.Button("&lt;color=#FFFFFFFF&gt;查看Style参数&lt;/color&gt;", tmp))      {          ShowGUIStyleMsg(style.name);      }      GUILayout.Space(30);      // 显示当前 GUIStyle 的名字      EditorGUILayout.SelectableLabel(style.name);      // 设置左右对称布局，以此为分界线，把前后的布局对称      GUILayout.FlexibleSpace();      // 设置文本居中显示      style.alignment = TextAnchor.MiddleCenter;      // 显示当前的样式及其名称      EditorGUILayout.SelectableLabel(style.name, style);      GUILayout.Space(100);      // 单独显示样式      EditorGUILayout.SelectableLabel("", style,                                      GUILayout.Height(style.fixedHeight),                                       GUILayout.Width(style.fixedWidth));      GUILayout.Space(100);      GUILayout.EndHorizontal();  }  /// &lt;summary&gt;  /// 创建一个按钮样式，用来作为本界面中的按钮基础  /// &lt;/summary&gt;  /// &lt;returns&gt;&lt;/returns&gt;  public static GUIStyle GetBtnStyle()  {      // 使用系统自带的 "AC Button" 样式作为原型，因为 "AC Button" 本身就具有点击效果了      GUIStyle style = new GUIStyle("AC Button");      // 将样式的点击时的效果图，替换为系统自带的 "flow node 4 on" 样式      GUIStyle active = new GUIStyle("flow node 4 on");      style.active.background = active.normal.background;      // 将平时按钮的效果图，替换为系统自带的 "flow node 4" 样式      GUIStyle normal = new GUIStyle("flow node 4");      style.normal.background = normal.normal.background;      // 参考 "flow node 4" 的内部参数，设置一些图片的参数。      // 如果不设置的话，则图片会按照原 "AC Button" 的样式进行显示      // 因为图片不一样，所以会有显示上的问题。      style.stretchHeight = true;      style.stretchWidth = true;      style.border = new RectOffset(11, 11, 11, 15);      style.margin = new RectOffset(0, 0, 0, 0);      style.padding = new RectOffset(0, 0, 0, 0);      style.overflow = new RectOffset(7, 7, 6, 9);      // 进行文本方面的设置      style.alignment = TextAnchor.MiddleCenter;      style.fontSize = 18;      style.richText = true;      return style;  }  /// &lt;summary&gt;  /// 展示指定的 GUI 样式的一些数值  /// &lt;/summary&gt;  /// &lt;param name="style"&gt;&lt;/param&gt;  public void ShowGUIStyleMsg(string style)  {      // 清空控制台信息，防止混淆      ClearConsole();      GUIStyle tmp = new GUIStyle(style);      Debug.Log("Style Name: " + tmp.name);      Debug.Log("Style Normal: " + tmp.normal.background);      Debug.Log("Style Normal Color: " + tmp.normal.textColor);      Debug.Log("Style Active: " + tmp.active.background);      Debug.Log("Style Active Color: " + tmp.active.textColor);      Debug.Log("Style Hover: " + tmp.hover.background);      Debug.Log("Style Hover Color: " + tmp.hover.textColor);      Debug.Log("Style Focused: " + tmp.focused.background);      Debug.Log("Style Focused Color: " + tmp.focused.textColor);      Debug.Log("Style border: " + tmp.border);      Debug.Log("Style margin: " + tmp.margin);      Debug.Log("Style padding: " + tmp.padding);      Debug.Log("Style overflow: " + tmp.overflow);      Debug.Log("Style fixedWidth: " + tmp.fixedWidth);      Debug.Log("Style fixedHeight: " + tmp.fixedHeight);      Debug.Log("Style stretchWidth: " + tmp.stretchWidth);      Debug.Log("Style stretchHeight: " + tmp.stretchHeight);      Debug.Log("Style lineHeight: " + tmp.lineHeight);      Debug.Log("Style Font: " + tmp.font);      Debug.Log("Style Font Size: " + tmp.fontSize);  }  public void ClearConsole()  {      Assembly assembly = Assembly.GetAssembly(typeof(SceneView));      System.Type type = assembly.GetType("UnityEditor.LogEntries");      MethodInfo method = type.GetMethod("Clear");      method.Invoke(new object(), null);  }}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;using UnityEngine;
using UnityEditor;
using System.Reflection;

/// &amp;lt;summary&amp;gt;
/// Unity 自带的 GUIStyle 效果查看器
/// &amp;lt;/summary</summary>
      
    
    
    
    <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
    <category term="Unity Editor" scheme="http://yoursite.com/tags/Unity-Editor/"/>
    
  </entry>
  
  <entry>
    <title>宝藏网站（持续更新）</title>
    <link href="http://yoursite.com/2023/03/02/%E5%AE%9D%E8%97%8F%E7%BD%91%E7%AB%99%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>http://yoursite.com/2023/03/02/%E5%AE%9D%E8%97%8F%E7%BD%91%E7%AB%99%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</id>
    <published>2023-03-02T06:47:39.000Z</published>
    <updated>2023-03-02T06:48:58.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://convertio.co/zh/" target="_blank" rel="noopener">在线格式转换器</a></p><p><a href="https://www.aplaybox.com/" target="_blank" rel="noopener">模之屋</a></p><h2 id="图形相关"><a href="#图形相关" class="headerlink" title="图形相关"></a>图形相关</h2><p><a href="https://roystan.net/articles/" target="_blank" rel="noopener">Roystan</a></p><p><a href="https://www.shadertoy.com/" target="_blank" rel="noopener">Shadertoy</a></p><p><a href="https://catlikecoding.com/unity/tutorials/custom-srp/draw-calls/#2.1" target="_blank" rel="noopener">Draw Calls</a></p><p><a href="https://zhuanlan.zhihu.com/p/433385999" target="_blank" rel="noopener">菜鸡都能学会的Unity草地shader</a></p><p><a href="https://zhuanlan.zhihu.com/p/47575695" target="_blank" rel="noopener">肥皂泡的渲染（薄膜干涉）</a></p><p><a href="https://www.zhihu.com/column/c_1215952152252121088" target="_blank" rel="noopener">从零开始的卡通渲染</a></p><h2 id="编辑器相关"><a href="#编辑器相关" class="headerlink" title="编辑器相关"></a>编辑器相关</h2><p><a href="https://blog.csdn.net/alexhu2010q/article/details/118053288" target="_blank" rel="noopener">UnityGraphView</a></p><p><a href="https://blog.csdn.net/alexhu2010q/article/details/118053288" target="_blank" rel="noopener">Unity的GraphView</a></p><p><a href="https://focus-creative-games.github.io/hybridclr/about/#文档" target="_blank" rel="noopener">HybridCLR</a></p><h2 id="大佬的个人网站"><a href="#大佬的个人网站" class="headerlink" title="大佬的个人网站"></a>大佬的个人网站</h2><p><a href="https://yremp.live/" target="_blank" rel="noopener">Yremp</a></p><p><a href="https://2heng.xin/" target="_blank" rel="noopener">Mashiro</a></p><p><a href="http://walkingfat.com/" target="_blank" rel="noopener">Walkingfat</a></p><p><a href="https://www.patreon.com/minionsart/" target="_blank" rel="noopener">Minionsart</a></p><p><a href="https://www.lfzxb.top/" target="_blank" rel="noopener">烟雨迷离半世殇</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://convertio.co/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在线格式</summary>
      
    
    
    
    <category term="Commom" scheme="http://yoursite.com/categories/Commom/"/>
    
    
  </entry>
  
  <entry>
    <title>记录一些HLSL常用函数</title>
    <link href="http://yoursite.com/2023/03/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9BHLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2023/03/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9BHLSL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2023-03-02T06:40:17.000Z</published>
    <updated>2023-03-02T07:09:05.409Z</updated>
    
    <content type="html"><![CDATA[<p>查看函数图像网站：<a href="https://graphtoy.com/" target="_blank" rel="noopener">https://graphtoy.com/</a></p><h2 id="基础数学运算"><a href="#基础数学运算" class="headerlink" title="基础数学运算"></a>基础数学运算</h2><ul><li>max（a, b） 返回较大的数</li><li>min（a, b） 返回较小的数</li><li>mul（a, b） 两变量相乘，常用于矩阵运算</li><li>abs（a） 返回a的绝对值</li><li>round (x) 返回与x最近的整数</li><li>sqrt (x) 返回x的平方根</li><li>rsqrt (x) 返回x的平方根的倒数</li><li>degrees (x) 弧度转角度</li><li>redians (x) 角度转弧度</li><li>noise (x) 噪声</li></ul><h2 id="幂指对函数"><a href="#幂指对函数" class="headerlink" title="幂指对函数"></a>幂指对函数</h2><ul><li>pow (x, y) x的y次幂</li><li>exp (x) 返回e为底的指数函数</li><li>exp2 (value x) 返回以2位底，x为指数幂</li><li>ldexp (x, exp) 返回与2exp次方的乘积</li><li>log (x) 返回指定值得以e为底数的对数</li><li>log10 (x) 求以10为底的对数</li><li>log2 (x) 求以2为底的对数</li><li>frexp (x , out exp) 将浮点数分解成尾数和指数，x的返回值是尾数,exp参数返回的值是指数</li></ul><h2 id="三角函数和双曲线函数"><a href="#三角函数和双曲线函数" class="headerlink" title="三角函数和双曲线函数"></a>三角函数和双曲线函数</h2><ul><li>sin（x）、cos（x）、tan（x） 三角函数</li><li>asin（x）、acos（x）、atan（x） 反三角函数</li><li>sincos（x，out s，out c） 返回x的正弦和余弦</li><li>tan（y，x） 返回y/x的正切</li><li>atan2（y，x） 返回y/x的反正切</li><li>sinh（x） 返回x的双曲正弦值</li><li>cosh（x） 返回x的双曲余弦值</li><li>tanh（x） 返回x的双曲正弦值</li></ul><h2 id="处理数值函数"><a href="#处理数值函数" class="headerlink" title="处理数值函数"></a>处理数值函数</h2><ul><li>ceil（x） 返回&gt;=x的最小整数（向下取整）</li><li>floor（x） 返回&lt;=x的最大整数（向上取整）</li><li>step（x，y） x&lt;=y返回1，否则返回0</li><li>saturate（x） 返回将x钳制到[0,1]范围之间的值</li><li>clamp（x，min，max） 将x限制在[min，max]范围的值，比min小返回min，比max大返回max</li><li>fmord（x，y） 返回x对y取余的余数</li><li>frac（x） 取x的小数部分</li><li>modf（x，out ip） 将x分为小数和整数部分（输出的ip为整数部分，返回值为小数部分）</li><li>lerp（x，y，s） 按照s在x到y之间插值，返回</li><li>smoothstep（min，max，x） 如果x在[min，max]范围内，就返回介于[0，1]之间的平滑Hermite插值，使用smoothstep在两个值创建平滑过渡</li></ul><h2 id="条件判断函数"><a href="#条件判断函数" class="headerlink" title="条件判断函数"></a>条件判断函数</h2><ul><li>all（x） 确定指定量的所有分量是否均为非零，均非零则返回true，否则返回false</li><li>clip（x） 如果输入值小于零，则丢弃当前像素 常用于判定范围(不仅仅针对0,返回值为void) <strong>常用于Alpha测试，如果每个分量代表到平面的距离，还可以用来模拟剪切平面</strong></li><li>sign（x） 返回x的正负性 如果x小于零返回-1，如果x等于零返回0，如果x大于零返回1</li><li>isinf（x） 如果x参数为+ INF或-INF(无穷+无穷仍无穷，0x3f3f3f3f)，返回true，否则返回False</li><li>isfinite（x） 判断x参数是有限，即有界的，与isinf(x)相反</li><li>isnan（x） 如果x参数为NAN(非数字)，返回true，否则返回false</li></ul><h2 id="向量和矩阵函数"><a href="#向量和矩阵函数" class="headerlink" title="向量和矩阵函数"></a>向量和矩阵函数</h2><ul><li>length(v) 返回向量的长度</li><li>normalize(v) 向量归一化</li><li>distance(a,b) 返回两个向量之间的距离，不平行的两个向量应该为0，此处表示为根号下各分量之差的平方和</li><li>dot(a,b) 返回a和b两向量的点积</li><li>cross(a,b) 返回a和b两向量的叉积，返回值是向量，并且与a,b都垂直</li><li>determinant(m) 返回指定浮点矩阵的按行列式方式计算的值</li><li>transpose(m) 返回矩阵m的转置矩阵</li></ul><h2 id="光线预算函数"><a href="#光线预算函数" class="headerlink" title="光线预算函数"></a>光线预算函数</h2><ul><li>reflect(i,n) 以i为入射向量n为法线方向的反射光</li><li>refract(i,n,ri) 以i为入射向量n为法线方向,ri为折射率的折射光</li><li>lit(n_dot_l,n_dot_h，m) 输入标量(normal,light,半角向量h,镜面反射系数m) 返回光照向量(环境光，漫反射光，镜面高光反射，1)<strong>该计算依据的是BlingPhong光照模型</strong></li><li>faceforward(n,i,ng) 得到面向视图方向的曲面法向量输入输出为同元向量,返回-n*sign(dot(i,ng))(normal,light,normal)</li></ul><h2 id="纹理查找函数"><a href="#纹理查找函数" class="headerlink" title="纹理查找函数"></a>纹理查找函数</h2><h3 id="1D纹理查找函数"><a href="#1D纹理查找函数" class="headerlink" title="1D纹理查找函数"></a>1D纹理查找函数</h3><ul><li>tex1D(s, t) 普通一维纹理查找 返回纹理采样器s在标量t位置的color4</li><li>tex1D(s,t,ddx,ddy) 使用微分查询一维纹理， t和ddxy均为vector</li><li>tex1Dlod(s, t) 使用LOD查找纹理s在t.w位置的color4</li><li>tex1Dbias(s, t) 将t.w决定的某个MIP层偏置后的一维纹理查找</li><li>tex1Dgrad(s,t,ddx,ddy) 使用微分并指定MIP层的一维纹理查找</li><li>tex1Dproj(s, t) 把纹理当做一张幻灯片投影到场景中，先使用投影纹理技术需要计算出投影纹理坐标t(坐标t.w除以透视值)，然后使用投影纹理坐标进行查询</li></ul><h3 id="2D纹理查找函数"><a href="#2D纹理查找函数" class="headerlink" title="2D纹理查找函数"></a>2D纹理查找函数</h3><ul><li>tex2D(s, t) 普通二维纹理查找 返回纹理采样器s在vector t位置的颜色</li><li>ex2D(s,t,ddx,ddy) 使用微分查询二维纹理，t和ddxy均为vector</li><li>tex2Dlod(s, t) 使用LOD查找纹理s在t.w位置的color4</li><li>tex2Dbias(s, t) 将t.w决定的某个MIP层偏置后的二维纹理查找</li><li>tex2Dgrad(s,t,ddx,ddy) 使用微分并指定MIP层的二维纹理查找</li><li>tex2Dproj(s, t) 把纹理当做一张幻灯片投影到场景中，先使用投影纹理技术需要计算出投影纹理坐标t(坐标t.w除以透视值)，然后使用投影纹理坐标进行查询</li></ul><h3 id="3D纹理查找函数"><a href="#3D纹理查找函数" class="headerlink" title="3D纹理查找函数"></a>3D纹理查找函数</h3><ul><li>tex3D(s, t) 普通三维纹理查找 返回纹理采样器s在vector t位置的颜色</li><li>ex3D(s,t,ddx,ddy) 使用微分查询三维纹理，t和ddxy均为vector</li><li>tex3Dlod(s, t) 使用LOD查找纹理s在t.w位置的color4</li><li>tex3Dbias(s, t) 将t.w决定的某个MIP层偏置后的三维纹理查找</li><li>tex3Dgrad(s,t,ddx,ddy) 使用微分并指定MIP层的三维纹理查找</li><li>tex3Dproj(s, t) 把纹理当做一张幻灯片投影到场景中，先使用投影纹理技术需要计算出投影纹理坐标t(坐标t.w除以透视值)，然后使用投影纹理坐标进行查询</li></ul><h3 id="立体纹理查找"><a href="#立体纹理查找" class="headerlink" title="立体纹理查找"></a>立体纹理查找</h3><ul><li>texCUBE(s,t) 返回纹理采样器s在vector t位置的颜色</li><li>texCUBE(s,t,ddx,ddy) 使用微分查询立方体维纹理 ，t和ddxy均为vector</li><li>texCUBEDload(s,t) 使用LOD查找纹理s在t.w位置的color4</li><li>texCUBEbias(s,t) 将t.w决定的某个MIP层偏置后的立方体纹理查找</li><li>texCUBEgrad(s,t,ddx,ddy) 使用微分并指定MIP层的立方体纹理查找</li><li>texCUBEproj(s,t) 使用投影方式的立方体纹理查找</li></ul><h2 id="偏导函数ddx和ddy"><a href="#偏导函数ddx和ddy" class="headerlink" title="偏导函数ddx和ddy"></a>偏导函数ddx和ddy</h2><p>ddx(vector3)、ddy(vector3) ddx 和 ddy 用于求取相邻像素间某属性的差值</p><p><img src="http://acgloby.com/wp-content/uploads/2021/11/ddx.png" alt="img"></p><h3 id="Core-hlsl"><a href="#Core-hlsl" class="headerlink" title="Core.hlsl"></a>Core.hlsl</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>GetVertexPositionInputs(float3 positionOS)</td><td>获取输入顶点坐标信息</td></tr><tr><td>GetVertexNormalInputs(float3 normalOS)</td><td>获取输入顶点法线信息</td></tr><tr><td>GetVertexNormalInputs(float3 normalOS, float4 tangentOS)</td><td>获取输入顶点法线信息（重载）</td></tr><tr><td>GetScaledScreenParams()</td><td>获取屏幕缩放参数信息</td></tr><tr><td>NormalizeNormalPerVertex(real3 normalWS)</td><td>逐顶点法线正交</td></tr><tr><td>NormalizeNormalPerPixel(real3 normalWS)</td><td>逐像素法线正交</td></tr><tr><td>ComputeScreenPos(float4 positionCS)</td><td>计算屏幕坐标信息</td></tr><tr><td>（real）ComputeFogFactor(float z)</td><td>计算雾参数</td></tr><tr><td>（real）ComputeFogIntensity(real fogFactor)</td><td>计算雾强度</td></tr><tr><td>（half3）MixFogColor(real3 fragColor, real3 fogColor, real fogFactor)</td><td>混合雾颜色</td></tr><tr><td>（half3）MixFog(real3 fragColor, real fogFactor)</td><td>混合雾</td></tr></tbody></table><h3 id="Lighting-hlsl"><a href="#Lighting-hlsl" class="headerlink" title="Lighting.hlsl"></a>Lighting.hlsl</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>DistanceAttenuation(float distanceSqr, half2 distanceAttenuation)</td><td>距离衰减</td></tr><tr><td>AngleAttenuation(half3 spotDirection, half3 lightDirection, half2 spotAttenuation)</td><td>角度衰减</td></tr><tr><td>GetMainLight()/GetMainLight(float4 shadowCoord)</td><td>获取主光源</td></tr><tr><td>GetPerObjectLightIndex(int index)</td><td>获取每个对象灯光Index</td></tr><tr><td>GetAdditionalLightsCount()</td><td>获取额外灯光数量</td></tr><tr><td>ReflectivitySpecular(half3 specular)</td><td>高光反射率</td></tr><tr><td>OneMinusReflectivityMetallic(half metallic)</td><td>OneMinus金属反射率</td></tr><tr><td>InitializeBRDFData(half3 albedo, half metallic, half3 specular, half smoothness, half alpha, out BRDFData outBRDFData)</td><td>初始化BRDF</td></tr><tr><td>EnvironmentBRDF(BRDFData brdfData, half3 indirectDiffuse, half3 indirectSpecular, half fresnelTerm)</td><td>环境BRDF</td></tr><tr><td>DirectBDRF(BRDFData brdfData, half3 normalWS, half3 lightDirectionWS, half3 viewDirectionWS)</td><td>BRDF</td></tr><tr><td>SampleLightmap(float2 lightmapUV, half3 normalWS)</td><td>光照贴图</td></tr><tr><td>GlossyEnvironmentReflection(half3 reflectVector, half perceptualRoughness, half occlusion)</td><td>环境光泽反射</td></tr><tr><td>GlobalIllumination(BRDFData brdfData, half3 bakedGI, half occlusion, half3 normalWS, half3 viewDirectionWS)</td><td>全局光照</td></tr><tr><td>MixRealtimeAndBakedGI(inout Light light, half3 normalWS, inout half3 bakedGI, half4 shadowMask)</td><td>实时烘培混合</td></tr><tr><td>LightingLambert(half3 lightColor, half3 lightDir, half3 normal)</td><td>兰伯特模型</td></tr><tr><td>LightingSpecular(half3 lightColor, half3 lightDir, half3 normal, half3 viewDir, half4 specular, half smoothness)</td><td>高光</td></tr><tr><td>LightingPhysicallyBased(BRDFData brdfData, half3 lightColor, half3 lightDirectionWS, half lightAttenuation, half3 normalWS, half3 viewDirectionWS)/LightingPhysicallyBased(BRDFData brdfData, Light light, half3 normalWS, half3 viewDirectionWS)</td><td>基于物理的光照模型</td></tr><tr><td>VertexLighting(float3 positionWS, half3 normalWS)</td><td>顶点光照颜色</td></tr><tr><td>LightweightFragmentPBR(InputData inputData, half3 albedo, half metallic, half3 specular,half smoothness, half occlusion, half3 emission, half alpha)</td><td>轻量级片元PBR</td></tr><tr><td>LightweightFragmentBlinnPhong(InputData inputData, half3 diffuse, half4 specularGloss, half smoothness, half3 emission, half alpha)</td><td>轻量级片元布林·冯</td></tr></tbody></table><h3 id="Shadows-hlsl"><a href="#Shadows-hlsl" class="headerlink" title="Shadows.hlsl"></a>Shadows.hlsl</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>GetMainLightShadowStrength()</td><td>获取主光源阴影强度</td></tr><tr><td>GetAdditionalLightShadowStrenth(int lightIndex)</td><td>获取额外光源阴影强度</td></tr><tr><td>SampleScreenSpaceShadowmap(float4 shadowCoord)</td><td>屏幕空间阴影贴图</td></tr><tr><td>SampleShadowmap(float4 shadowCoord, TEXTURE2D_SHADOW_PARAM(ShadowMap, sampler_ShadowMap), ShadowSamplingData samplingData, half shadowStrength, bool isPerspectiveProjection = true)</td><td>阴影贴图</td></tr><tr><td>TransformWorldToShadowCoord(float3 positionWS)</td><td>把顶点的世界坐标转换到阴影坐标</td></tr><tr><td>MainLightRealtimeShadow(float4 shadowCoord)</td><td>主光源实时阴影</td></tr><tr><td>AdditionalLightRealtimeShadow(int lightIndex, float3 positionWS)</td><td>额外光源实时阴影</td></tr><tr><td>GetShadowCoord(VertexPositionInputs vertexInput)</td><td>获取阴影坐标信息</td></tr><tr><td>ApplyShadowBias(float3 positionWS, float3 normalWS, float3 lightDirection)</td><td>应用阴影偏移</td></tr></tbody></table><h3 id="SpaceTransforms-hlsl"><a href="#SpaceTransforms-hlsl" class="headerlink" title="SpaceTransforms.hlsl"></a>SpaceTransforms.hlsl</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>TransformObjectToWorld(float3 positionOS)</td><td>当前模型空间转世界空间矩阵，通常用于把顶点/方向矢量从模型空间转到世界空间</td></tr><tr><td>TransformWorldToObject(float3 positionWS)</td><td>当前世界空间转模型空间矩阵，通常用于把顶点/方向矢量从世界空间转到模型空间</td></tr><tr><td>TransformWorldToView(float3 positionWS)</td><td>当前世界空间转相机空间矩阵，通常用于把顶点/方向矢量从世界空间转到相机空间</td></tr><tr><td>TransformObjectToHClip(float3 positionOS)</td><td>当前模型空间转裁剪空间矩阵，通常用于把顶点/方向矢量从模型空间转到裁剪空间</td></tr><tr><td>TransformWorldToHClip(float3 positionWS)</td><td>当前世界空间转裁剪空间矩阵，通常用于把顶点/方向矢量从世界空间转到裁剪空间</td></tr><tr><td>TransformWViewToHClip(float3 positionVS)</td><td>当前相机空间转裁剪空间矩阵，通常用于把顶点/方向矢量从相机空间转到裁剪空间</td></tr><tr><td>TransformObjectToWorldDir(real3 dirOS)</td><td>把方向矢量从模型空间转换到世界空间中</td></tr><tr><td>TransformWorldToObjectDir(real3 dirWS)</td><td>把方向矢量从世界空间转换到模型空间中</td></tr><tr><td>TransformWorldToViewDir(real3 dirWS)</td><td>把方向矢量从世界空间转换到相机空间中</td></tr><tr><td>TransformWorldToHClipDir(real3 directionWS)</td><td>把方向矢量从世界空间转换到裁剪空间中</td></tr><tr><td>TransformObjectToWorldNormal(float3 normalOS)</td><td>把法线从模型空间转换到世界空间中</td></tr><tr><td>CreateTangentToWorld(real3 normal, real3 tangent, real flipSign)</td><td>创建一个切线空间转为世界空间的3x3矩阵</td></tr><tr><td>TransformTangentToWorld(real3 dirTS, real3x3 tangentToWorld)</td><td>当前切线空间转世界空间矩阵，通常用于把顶点/方向矢量从切线空间转到世界空间</td></tr><tr><td>TransformWorldToTangent(real3 dirWS, real3x3 tangentToWorld)</td><td>当前世界空间转切线空间矩阵，通常用于把顶点/方向矢量从世界空间转到切线空间</td></tr><tr><td>TransformTangentToObject(real3 dirTS, real3x3 tangentToWorld)</td><td>当前切线空间转模型空间矩阵，通常用于把顶点/方向矢量从切线空间转到模型空间</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查看函数图像网站：&lt;a href=&quot;https://graphtoy.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://graphtoy.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;基础数学运算&quot;&gt;&lt;a href=&quot;#基础数学运算&quot; c</summary>
      
    
    
    
    <category term="HLSL" scheme="http://yoursite.com/categories/HLSL/"/>
    
    
    <category term="Unity HLSL Shader" scheme="http://yoursite.com/tags/Unity-HLSL-Shader/"/>
    
  </entry>
  
  <entry>
    <title>Unity Shader Build-In To HLSL</title>
    <link href="http://yoursite.com/2023/02/25/Unity-Shader-Build-In-To-HLSL/"/>
    <id>http://yoursite.com/2023/02/25/Unity-Shader-Build-In-To-HLSL/</id>
    <published>2023-02-25T13:25:25.000Z</published>
    <updated>2023-02-27T06:29:42.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记录一些常用的-Build-In-到-HLSL-的函数"><a href="#记录一些常用的-Build-In-到-HLSL-的函数" class="headerlink" title="记录一些常用的 Build-In 到 HLSL 的函数"></a>记录一些常用的 Build-In 到 HLSL 的函数</h3><h6 id="光照模式"><a href="#光照模式" class="headerlink" title="光照模式"></a>光照模式</h6><table><thead><tr><th style="text-align:left">Bulid - In</th><th>URP</th></tr></thead><tbody><tr><td style="text-align:left">ForwardBase</td><td>UniversalForward</td></tr><tr><td style="text-align:left">ForwardAdd</td><td>开启关键字 _ADDTIONAL_LIGHTS</td></tr><tr><td style="text-align:left">ShadowCaster</td><td>ShadowCaster</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;记录一些常用的-Build-In-到-HLSL-的函数&quot;&gt;&lt;a href=&quot;#记录一些常用的-Build-In-到-HLSL-的函数&quot; class=&quot;headerlink&quot; title=&quot;记录一些常用的 Build-In 到 HLSL 的函数&quot;&gt;&lt;/a&gt;记录一些常</summary>
      
    
    
    
    <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
    <category term="Unity Shader HLSL" scheme="http://yoursite.com/tags/Unity-Shader-HLSL/"/>
    
  </entry>
  
  <entry>
    <title>使用手册</title>
    <link href="http://yoursite.com/2022/01/14/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2022/01/14/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</id>
    <published>2022-01-14T14:09:46.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HEXO使用手册"><a href="#HEXO使用手册" class="headerlink" title="HEXO使用手册"></a>HEXO使用手册</h1><p>测试和搭建环境</p><ul><li><code>hexo clean</code>清除了你之前生成的东西，也可以不加。</li><li><code>hexo new newpage</code> 新建一个文章</li><li><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写</li><li><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</li><li><code>hexo new draft newpage</code> 新建一个 <code>newpage.md</code> 文件</li><li><code>hexo publish draft newpage</code>发布post</li></ul><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HEXO使用手册&quot;&gt;&lt;a href=&quot;#HEXO使用手册&quot; class=&quot;headerlink&quot; title=&quot;HEXO使用手册&quot;&gt;&lt;/a&gt;HEXO使用手册&lt;/h1&gt;&lt;p&gt;测试和搭建环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hexo clean&lt;/code&gt;清除</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>技能系统-主动技能</title>
    <link href="http://yoursite.com/2022/01/02/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F-%E4%B8%BB%E5%8A%A8%E6%8A%80%E8%83%BD/"/>
    <id>http://yoursite.com/2022/01/02/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F-%E4%B8%BB%E5%8A%A8%E6%8A%80%E8%83%BD/</id>
    <published>2022-01-02T06:58:50.000Z</published>
    <updated>2023-03-02T08:45:05.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技能系统简述"><a href="#技能系统简述" class="headerlink" title="技能系统简述"></a>技能系统简述</h2><p>技能系统使用组件式开发，由一个SKillEntity管理所有的Component，Compoent负责实现模块的具体功能，技能分为主动技能和被动技能。</p><h4 id="主动技能-SkillEntity"><a href="#主动技能-SkillEntity" class="headerlink" title="主动技能(SkillEntity)"></a>主动技能(SkillEntity)</h4><p>主动技能有根据释放类型不同分为普通技能、开关技能、蓄力技能、循环技能等…，根据外部系统分为普通攻击、普通技能和大招等…有些特殊的系统会加入其他类型的技能比如QTE之类的。</p><h3 id="SkillEntity"><a href="#SkillEntity" class="headerlink" title="SkillEntity"></a>SkillEntity</h3><ul><li>释放条件 <code>SkillConditionComponent</code></li><li>技能释放 <code>SkillBasicComponent</code></li><li>技能配置 <code>SkillData</code></li></ul><h3 id="SkillData"><a href="#SkillData" class="headerlink" title="SkillData"></a>SkillData</h3><p>技能配置数据由三个部分和一个参数组成</p><ul><li><code>ConfData</code>（Excel配置，主要是一些外部系统配置如：技能描述、图标、名字等…，以及一些数值相关的配置如：技能伤害计算相关联属性）</li><li><code>EditorData</code>（技能编辑器配置，包含技能目标选择条件、技能范围、释放条件在什么条件下释放什么效果，在什么时间释放什么技能效果播什么动作和音效，技能效果（伤害，位移，发射子物体，子弹时间、时间减速等…））</li><li><code>SkillBlock</code>列表（一个技能分为多个SkillBlock，相当于释放技能时根据条件的不同选择释放不同的SkillBlock,释放的Effect是由SkillBlock来管理释放的。如：目标身上有id为2333的buff时释放瞬移到目标位置，没有时释放一个向前的范围伤害，这两个不同的需求算作一个Skill，两个SkillBlock，每个SkillBlock下的Effect不同）</li><li><code>EffectData</code>列表 （技能包含的所有Effect）</li><li><code>SkillAction</code>列表（技能动作）</li></ul><p><a href="http://acgloby.com/wp-content/uploads/2021/11/image-2.png" target="_blank" rel="noopener"><img src="技能系统-主动技能/image-2.png" alt="img"></a></p><p>上图配置是在范围内筛选出一个目标作为技能目标，在范围内可以释放技能，否则朝向目标移动。</p><h3 id="SkillBlock"><a href="#SkillBlock" class="headerlink" title="SkillBlock"></a>SkillBlock</h3><ul><li><code>**SkillBlockData** Data</code>；</li><li><code>**List&lt;EffectData&gt;** effectDatas</code>;</li></ul><p><a href="http://acgloby.com/wp-content/uploads/2021/11/SkillBlock.png" target="_blank" rel="noopener"><img src="技能系统-主动技能/SkillBlock.png" alt="img"></a></p><p><code>SkillBlock</code>封装技能具体实现配置，一个完整的技能由多个<code>SkillBlock</code>数据组成，每个<code>SkillBlock</code>都是一个完整的技能表现。</p><ul><li>第一部分SkillBlock是技能中的索引配置，当前执行完之后跳转的索引。</li><li>第二部分是SkillBlock执行的条件，填Condition找对应的Condition配置检测条件通过后执行。</li><li>第三部分是技能打断条件，分三部分时间和打断行为类型。</li><li>第四部分是技能的动作配置，动作融合。</li><li>第五部分是技能效果<code>Effect</code>，技能产生的效果，如：造成伤害，位移，击飞，子弹时间，屏幕效果等。</li></ul><h2 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h2><p>技能效果，是技能直接作用于游戏逻辑的，如伤害会对目标造成伤害同时对方播受击动画特效等；位移会强制改变目标位置；击飞会对权重低目标产生击飞的效果，子弹时间会改变除目标外其他角色的时间增量；时间减速会改变TimeScale等。</p><ul><li>Id，Name，Type，开始时间，持续时间，释放概率等一些基础功能。</li><li>控制技能效果生效的SkillConditon。</li><li>播放音效。</li><li>播放特效。</li><li>目标类型范围，用于筛选在范围内可被作为目标的角色。</li></ul><p><code>Effect</code>作为所有技能效果的基类，所有的技能效果都继承自<code>Effect</code>。</p><p><a href="http://acgloby.com/wp-content/uploads/2021/11/image-4.png" target="_blank" rel="noopener"><img src="技能系统-主动技能/image-4.png" alt="img"></a></p><p>上图是改变相机镜头缩放的技能效果。</p><p>除了Effect的基础功能外，Zoom效果实现了对相机FOV和，GroupFramingSize的改变，同时加入了淡入淡出和曲线的功能，实现了镜头缩放的效果。</p><h2 id="SkillEntity实现细节"><a href="#SkillEntity实现细节" class="headerlink" title="SkillEntity实现细节"></a>SkillEntity实现细节</h2><h3 id="SkillBasicComponent"><a href="#SkillBasicComponent" class="headerlink" title="SkillBasicComponent"></a>SkillBasicComponent</h3><ul><li><code>**SkillBlock** playingSkillBlock;</code>// 当前正在执行的SkillBlock</li></ul><p>技能逻辑处理组件，处理SkillBlock逻辑，当SkillEnity创建时就开始Tick增加计算技能的时间轴，当前一个SkillBlock时间完成后跳转到一下个SkillBlock。</p><ul><li><code>**ISkillCaster** caster;</code> // 施法者</li><li><code>**ISkillReceiver** receiver;</code> // 被施法者</li></ul><p>技能需要有施法者和被施法者，技能效果所有的逻辑处理都基于施法者和被施法者，ISkillCaster和ISkillReceiver中规范了处理技能相关用到的一些方法，角色属性数据如：（生命值，攻击力，防御力等…），Transform信息，角色系别阵营如：（比如金木研属于青铜树，董香属于古董），战斗阵营信息（有方角色&amp;敌方角色等..）</p><h4 id="计时相关"><a href="#计时相关" class="headerlink" title="计时相关"></a>计时相关</h4><ul><li><code>**FixedCounter** EffectiveTimer；</code>// 当前的Effect</li><li><code>**FixedCounter** CoolTimer;</code>// 技能冷却时间</li></ul><p>FixedCounter是封装的计时器，设置最大值，在Tick中驱动，用于处理时间相关功能。常用参数有当前值，最大值，百分比值，设置增长值，是否完成计时等。</p><p>EffectiveTimer用作当前Effect的计时器</p><p>CoolTimer用作于技能冷却时间</p><h4 id="Tick"><a href="#Tick" class="headerlink" title="Tick"></a>Tick</h4><ul><li><code>TickEffective()</code> // 技能效果</li><li><code>TickCool()</code>// 冷却时间</li><li><code>TickAccumlateSkill()</code>// 蓄力技</li><li><code>TickOnOffSkill()</code>// 开关技</li><li><p>扩展其他类型的技能…</p></li><li><p>普通攻击Tick的deltaTime需要计算攻击速度</p></li><li>蓄力技需要处理释放逻辑，具体看技能是怎么实现的，如果说蓄力是由配置来决定跳转的SkillBlock那么只需处理释放就行了，蓄满后多长时间自动释放。设计成SkillBlock跳转，就是每个SkillBlock设置一定时长，蓄力时间达到这个SkillBlock跳转下一个蓄力SkillBlock，如果在当前SkillBlock释放的话直接跳转对应技能效果的SkillBlock。如果是需要记录蓄力时长那么久需要记录当前蓄力时间，设计的时候需要定制每个SkillBlock的蓄力时长，如果达到指定蓄力时长就选择对应SkillBlock。</li><li>开关技记录一下技能开关状态做不同的逻辑处理</li></ul><h4 id="InterruptSkill"><a href="#InterruptSkill" class="headerlink" title="InterruptSkill"></a>InterruptSkill</h4><p>打断技能，具体可配SkillBlock在技能的某时间段可被某种行为打断，做一个技能的衔接，一个角色的技能是否流程打断技能配置很关键。</p><p><img src="技能系统-主动技能/打断技能1.png" alt="img"></p><p>上图配置中<code>TotalTime</code>当前技能的持续时间，<code>xxTime</code>表示三段打断时间，<code>xxInterrupt</code> 表示打断技能的行为类型</p><p>移动打断，释放大招打断，普通攻击打断，使用技能打断等几种打断方式。</p><h3 id="SkillConditionComponent"><a href="#SkillConditionComponent" class="headerlink" title="SkillConditionComponent"></a>SkillConditionComponent</h3><h4 id="SkillCondition"><a href="#SkillCondition" class="headerlink" title="SkillCondition"></a>SkillCondition</h4><p><code>SkillCondition</code>条件基类封装一些条件检测通用的字段方法，如：条件类型，检测区域类型，检测范围半径，目标类型等字段，返回符合条件的目标，是否达成条件等方法，编辑器用的配置需要有读写xml的接口。所有扩展的条件都继承自<code>SkillCondition</code>。</p><p><code>SkillConditionComponent</code>主要职责是管理技能配置中所有<code>SkillCondition</code>，检测条件，对外提供检测结果的接口。传入条件id找到对应条件检测条件并返回结果。</p><p><img src="技能系统-主动技能/image.png" alt="img"></p><p>上图为检测角色身上被动技的条件。</p><p><img src="技能系统-主动技能/image-6.png" alt="img"></p><p>使用条件输入ConditionId，同时也实现了通过表达式来同时处理多个条件。</p><p>与、或、非（&amp; | ！）</p><p>[转载自][<a href="https://www.acgloby.com/技能系统程序设计思路-主动技能/]" target="_blank" rel="noopener">https://www.acgloby.com/技能系统程序设计思路-主动技能/]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;技能系统简述&quot;&gt;&lt;a href=&quot;#技能系统简述&quot; class=&quot;headerlink&quot; title=&quot;技能系统简述&quot;&gt;&lt;/a&gt;技能系统简述&lt;/h2&gt;&lt;p&gt;技能系统使用组件式开发，由一个SKillEntity管理所有的Component，Compoent负责实现模</summary>
      
    
    
    
    <category term="技能系统" scheme="http://yoursite.com/categories/技能系统/"/>
    
    
    <category term="技能系统" scheme="http://yoursite.com/tags/技能系统/"/>
    
  </entry>
  
  <entry>
    <title>技能系统-检测范围</title>
    <link href="http://yoursite.com/2022/01/02/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F-%E6%A3%80%E6%B5%8B%E8%8C%83%E5%9B%B4/"/>
    <id>http://yoursite.com/2022/01/02/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F-%E6%A3%80%E6%B5%8B%E8%8C%83%E5%9B%B4/</id>
    <published>2022-01-02T06:58:50.000Z</published>
    <updated>2023-03-02T08:44:00.827Z</updated>
    
    <content type="html"><![CDATA[<h4 id="矩形范围检测"><a href="#矩形范围检测" class="headerlink" title="矩形范围检测"></a>矩形范围检测</h4><p><a href="http://acgloby.com/wp-content/uploads/2021/10/矩形.png" target="_blank" rel="noopener"><img src="技能系统-检测范围/矩形.png" alt="img"></a></p><p>计算底边中点center，宽为2*range，长为length，朝向为q的矩形，是否与圆心为pos，半径为radius的圆有交点</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public bool IntersectsRectangle(Vector3 center, float length, float range, Quaternion q, Vector3 pos, float radius)</span><br><span class="line">{</span><br><span class="line">        Vector3 dis = pos - center;</span><br><span class="line">Vector3 forward = q * Vector3.forward;</span><br><span class="line">Vector3 right = q * Vector3.right;</span><br><span class="line">var vd = Vector3.Dot(dis, forward.normalized);</span><br><span class="line">var vl = Vector3.Dot(dis, right.normalized);</span><br><span class="line">return vd &gt; -radius &amp;&amp; vd &lt; length + radius &amp;&amp; vl &gt; -radius - range &amp;&amp; vl &lt; radius + range;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算中心点为center，高为height1的圆（柱），是否与底边中点为dst，高为height2的矩形（体）相交–只考虑高度</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public bool IntersectsHeight(Vector3 center, float radius, Vector3 dst, float height1, float height2)</span><br><span class="line">{</span><br><span class="line">var h = center.y - dst.y;</span><br><span class="line">if(h &gt;= 1e-6f)</span><br><span class="line">{</span><br><span class="line">        return h &lt;= height1 + height2;</span><br><span class="line">}</span><br><span class="line">        return Mathf.Abs(h) &lt; height1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="圆形范围检测"><a href="#圆形范围检测" class="headerlink" title="圆形范围检测"></a>圆形范围检测</h4><p><a href="http://acgloby.com/wp-content/uploads/2021/10/圆形.png" target="_blank" rel="noopener"><img src="技能系统-检测范围/圆形.png" alt="img"></a></p><p>判断两个圆形中心点距离是否小于两个圆形半径和</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public bool IntersectsCircle(Vector3 center, Vector3 pos, float r1, float r2)</span><br><span class="line">{</span><br><span class="line">        var radius = r1 + r2;</span><br><span class="line">        Vector3 d = pos - center;</span><br><span class="line">        Vector2 v = new Vector2(d.x, d.z);</span><br><span class="line">        return v.sqrMagnitude &lt;= radius * radius;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="环形范围检测"><a href="#环形范围检测" class="headerlink" title="环形范围检测"></a>环形范围检测</h4><p><a href="http://acgloby.com/wp-content/uploads/2021/10/环形.png" target="_blank" rel="noopener"><img src="技能系统-检测范围/环形.png" alt="img"></a></p><p>判断外圆形和目标中心点距离是否小于两个圆形半径和，并且大于内圆和目标距离半径和</p><h4 id="扇形范围检测"><a href="#扇形范围检测" class="headerlink" title="扇形范围检测"></a>扇形范围检测</h4><p><a href="http://acgloby.com/wp-content/uploads/2021/10/扇形.png" target="_blank" rel="noopener"><img src="技能系统-检测范围/扇形.png" alt="img"></a></p><p>判断圆形和扇形是否相交在圆形检测的基础上计算施法者与目标之间的夹角是否在扇形二分之一角度内</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public bool IntersectsSector(Transform caster, Transform receiver, float angle, float radius)</span><br><span class="line">{</span><br><span class="line">Vector3 deltaA = caster.position - receiver.position;</span><br><span class="line">float tmpAngle = Mathf.Acos(Vector3.Dot(deltaA.normalized, caster.forward)) * Mathf.Rad2Deg;</span><br><span class="line">        return tmpAngle &lt; angle * 0.5f &amp;&amp; deltaA.magnitude &lt; radius;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://www.acgloby.com/技能范围检测/" target="_blank" rel="noopener">转载自，侵删</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;矩形范围检测&quot;&gt;&lt;a href=&quot;#矩形范围检测&quot; class=&quot;headerlink&quot; title=&quot;矩形范围检测&quot;&gt;&lt;/a&gt;矩形范围检测&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://acgloby.com/wp-content/uploads/2021/10</summary>
      
    
    
    
    <category term="技能系统" scheme="http://yoursite.com/categories/技能系统/"/>
    
    
    <category term="技能系统" scheme="http://yoursite.com/tags/技能系统/"/>
    
  </entry>
  
  <entry>
    <title>技能系统-被动技能</title>
    <link href="http://yoursite.com/2022/01/02/%E8%A2%AB%E5%8A%A8%E6%8A%80%E8%83%BD-%E8%A2%AB%E5%8A%A8%E6%8A%80%E8%83%BD/"/>
    <id>http://yoursite.com/2022/01/02/%E8%A2%AB%E5%8A%A8%E6%8A%80%E8%83%BD-%E8%A2%AB%E5%8A%A8%E6%8A%80%E8%83%BD/</id>
    <published>2022-01-02T06:58:50.000Z</published>
    <updated>2023-03-02T08:45:26.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="被动技能（PassiveSkillEntity）-amp-光环技能（HaloSkillEntity）"><a href="#被动技能（PassiveSkillEntity）-amp-光环技能（HaloSkillEntity）" class="headerlink" title="被动技能（PassiveSkillEntity）&amp; 光环技能（HaloSkillEntity）"></a>被动技能（PassiveSkillEntity）&amp; 光环技能（HaloSkillEntity）</h2><p>被动技能有两种，一种是被动触发的技能，一种是光环技能在范围内才会生效的技能，所有被动技能继承自光环技能。</p><p>被动技算是一种特殊的光环技，没有范围的光环技。被动技能一般用来增加属性，增加buff之类的，也可以用作标记，只有在被动技触发时会释放效果列表。</p><p>光环技能有一个固定的范围（也不一定，可能会有技能效果会改变光环大小的效果ヾ(✿ﾟ▽ﾟ)ノ），进入光环时触发的效果，离开光环时的触发效果。</p><h3 id="被动技能触发器（事件系统）"><a href="#被动技能触发器（事件系统）" class="headerlink" title="被动技能触发器（事件系统）"></a>被动技能触发器（事件系统）</h3><p>被动技能选择触发条件，在Tick中检测触发器，满足时触发此被动技释放当被动技能触发的技能效果列表。</p><p>触发条件注册对应的事件（PassiveSkillEventType）在对应的系统上发送事件来触发被动技，如：当释放技能时触发被动，参数有技能id或者技能类型， 在CastSkill()释放技能时Push该事件，被动技能实时监测收到的事件满足条件触发对应的技能效果。</p><p>触发条件有生效次数、冷却时间来限制事件的触发。</p><p><a href="http://acgloby.com/wp-content/uploads/2021/11/image-17.png" target="_blank" rel="noopener"><img src="被动技能-被动技能/image-17-1024x321.png" alt="img"></a></p><p><a href="http://acgloby.com/wp-content/uploads/2021/11/image-18.png" target="_blank" rel="noopener"><img src="被动技能-被动技能/image-18.png" alt="img"></a></p><p>触发事件后释放被动技释放时的效果列表，如果没有添加事件对应加上该被动技就会触发该效果列表。</p><h2 id="光环技能"><a href="#光环技能" class="headerlink" title="光环技能"></a>光环技能</h2><p>光环技能与被动技不用在于光环技能会检测在光环范围内的目标，进入光环的时候释放效果，离开光环的时候释放效果，被动技能主要用在触发时释放效果。</p><p><a href="http://acgloby.com/wp-content/uploads/2021/11/image-19.png" target="_blank" rel="noopener"><img src="被动技能-被动技能/image-19.png" alt="img"></a></p><p><a href="http://acgloby.com/wp-content/uploads/2021/11/image-20.png" target="_blank" rel="noopener"><img src="被动技能-被动技能/image-20.png" alt="img"></a></p><p>如：光环目标类型是自己和伙伴，检测范围内的所有目标，筛选出符合目标的角色，放到一个列表内，进入光时添加一个无限时长buff，对应的离开光环时把这个buff驱散。</p><p>未完待续…</p><p>[转载自][<a href="https://www.acgloby.com/技能系统程序设计思路-被动技能/]" target="_blank" rel="noopener">https://www.acgloby.com/技能系统程序设计思路-被动技能/]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;被动技能（PassiveSkillEntity）-amp-光环技能（HaloSkillEntity）&quot;&gt;&lt;a href=&quot;#被动技能（PassiveSkillEntity）-amp-光环技能（HaloSkillEntity）&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="技能系统" scheme="http://yoursite.com/categories/技能系统/"/>
    
    
    <category term="技能系统" scheme="http://yoursite.com/tags/技能系统/"/>
    
  </entry>
  
  <entry>
    <title>Free_HDRSkybox</title>
    <link href="http://yoursite.com/2019/08/15/Free-HDRSkybox/"/>
    <id>http://yoursite.com/2019/08/15/Free-HDRSkybox/</id>
    <published>2019-08-15T13:28:39.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<p><a href="hdrihaven.com">HDR天空盒</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;hdrihaven.com&quot;&gt;HDR天空盒&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
    <category term="SkyBox" scheme="http://yoursite.com/tags/SkyBox/"/>
    
  </entry>
  
  <entry>
    <title>依赖倒置原则</title>
    <link href="http://yoursite.com/2019/08/13/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/13/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</id>
    <published>2019-08-13T11:50:12.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计原则：依赖倒置原则"><a href="#设计原则：依赖倒置原则" class="headerlink" title="设计原则：依赖倒置原则"></a>设计原则：依赖倒置原则</h1><p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><p>总结：依赖倒置原则</p><ul><li>A.高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。</li><li>B.抽象不应该依赖于具体，具体应该依赖于抽象。</li></ul><h2 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h2><p>当在 Unity 设计底层模块时，上层模块调用的东西其实就只是一些暴露出来的方法，当底层改动的时候上层也需要改动，这就形成了高层次模块对低层次模块的依赖。这时候可以抽象出来这些需要暴露的方法，即使用接口抽象出来，使得底层依赖了抽象的接口，高层也依赖了抽象的接口，从而使得设计更加清爽。</p><p><a href="https://zhuanlan.zhihu.com/p/28401100" target="_blank" rel="noopener">浅谈Unity开发中的分层设计</a> 中也使用了接口抽象的方式，不过是在底层之间的相互依赖中使用了接口，对于上层还是通过暴露公共方法的方式，加了个 模块管理器，来取得具体模块或者具体实现的接口。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/227328/1547347201283-d70ad1a3-3dc9-4b1c-8a60-5911580a7569.jpeg#align=left&amp;display=inline&amp;height=259&amp;originHeight=663&amp;originWidth=1116&amp;size=0&amp;width=436" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计原则：依赖倒置原则&quot;&gt;&lt;a href=&quot;#设计原则：依赖倒置原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则：依赖倒置原则&quot;&gt;&lt;/a&gt;设计原则：依赖倒置原则&lt;/h1&gt;&lt;p&gt;依赖倒置原则（Dependence Inversion Princi</summary>
      
    
    
    
    <category term="设计原则" scheme="http://yoursite.com/categories/设计原则/"/>
    
    
    <category term="设计原则" scheme="http://yoursite.com/tags/设计原则/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_桥接模式</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-13T11:49:45.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式：桥接模式-Bridge-Pattern"><a href="#设计模式：桥接模式-Bridge-Pattern" class="headerlink" title="设计模式：桥接模式(Bridge Pattern)"></a>设计模式：桥接模式(Bridge Pattern)</h1><p>将类的功能层次结构和实现层次结构相分离，使二者能够独立地变化，并在两者之间搭建桥梁，实现桥接。它是一种对象结构型模式，又称为<strong>柄体(Handle and Body)模式</strong>或<strong>接口(Interfce)模式</strong>。</p><p><strong>意图：</strong>在一个软件系统的抽象化和实现化之间使用关联关系（组合或者聚合关系）而<strong>不是继承关系</strong>，从而使两者可以相对独立地变化。</p><ul><li>将类的功能层次分离开，父类拥有子类所共有的功能，子类里实现新的功能。</li><li>将类的实现层次分离开，父类声明抽象方法，子类来实现。</li></ul><p>桥接模式主要包含以下几个角色</p><ul><li><strong>Abstraction</strong>：抽象类，抽象了功能的实现。</li><li><strong>RefinedAbstraction</strong>：扩充抽象类实现了具体的新的功能，构成功能层次结构。</li><li><strong>Implementor</strong>：实现类接口，提供了用于抽象类的接口。</li><li><strong>ConcreteImplementor</strong>：具体实现类，构成实现层次结构。</li></ul><p><strong>现要画一个不同颜色不同形状组合的圆，把抽象化和实现分离开来使其能独立地变化</strong></p><p><strong>抽象类：</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">  {</span><br><span class="line">      <span class="keyword">public</span> Color color;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetColor</span>(<span class="params">Color color</span>)</span></span><br><span class="line"><span class="function"></span>      {</span><br><span class="line">          <span class="keyword">this</span>.color = color;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><strong>扩充抽象类</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">  {</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>      {</span><br><span class="line">          color.BePaint(<span class="string">"圆"</span>);</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Square</span> : <span class="title">Shape</span></span><br><span class="line">  {</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>      {</span><br><span class="line">          color.BePaint(<span class="string">"正方形"</span>);</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><strong>实现类的接口：</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Color</span></span><br><span class="line">  {</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">BePaint</span>(<span class="params"><span class="keyword">string</span> shape</span>)</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><strong>具体实现类:</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Red</span> : <span class="title">Color</span></span><br><span class="line">   {</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BePaint</span>(<span class="params"><span class="keyword">string</span> shape</span>)</span></span><br><span class="line"><span class="function"></span>       {</span><br><span class="line">           Console.WriteLine(<span class="string">"红色的"</span> + shape);</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Black</span> : <span class="title">Color</span></span><br><span class="line">   {</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BePaint</span>(<span class="params"><span class="keyword">string</span> shape</span>)</span></span><br><span class="line"><span class="function"></span>       {</span><br><span class="line">           Console.WriteLine(<span class="string">"黑色的"</span> + shape);</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p><strong>画出不同颜色不同形状的圆：</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Draw</span></span><br><span class="line">   {</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoDraw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       {</span><br><span class="line">           Color red = <span class="keyword">new</span> Red();</span><br><span class="line">           Color black = <span class="keyword">new</span> Black();</span><br><span class="line">           Shape circle = <span class="keyword">new</span> Circle();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//画红色的圆</span></span><br><span class="line">           circle.SetColor(red);</span><br><span class="line">           circle.Draw();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//画黑色的圆</span></span><br><span class="line">           circle.SetColor(black);</span><br><span class="line">           circle.Draw();</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式：桥接模式-Bridge-Pattern&quot;&gt;&lt;a href=&quot;#设计模式：桥接模式-Bridge-Pattern&quot; class=&quot;headerlink&quot; title=&quot;设计模式：桥接模式(Bridge Pattern)&quot;&gt;&lt;/a&gt;设计模式：桥接模式(Bri</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_享元模式</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-13T11:49:34.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式：享元模式"><a href="#设计模式：享元模式" class="headerlink" title="设计模式：享元模式"></a>设计模式：享元模式</h1><h1 id="一、什么是享元模式？"><a href="#一、什么是享元模式？" class="headerlink" title="一、什么是享元模式？"></a>一、什么是享元模式？</h1><p><strong>享元模式（Flyweight）</strong>，运用共享技术有效地支持大量细粒度的对象。UML结构图如下：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/225637/1547115239417-4616bc5b-775f-4362-b2b2-0a165997e94b.png#align=left&amp;display=inline&amp;height=316&amp;name=%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8FUML%E5%9B%BE.png&amp;originHeight=316&amp;originWidth=634&amp;size=21131&amp;width=634" alt="享元模式UML图.png"></p><p>Flyweight是抽象享元角色。它是产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现；ConcreteFlyweight是具体享元角色，是具体的产品类，实现抽象角色定义的业务；<br>UnsharedConcreteFlyweight是不可共享的享元角色，一般不会出现在享元工厂中；<br>FlyweightFactory是享元工厂，它用于构造一个池容器，同时提供从池中获得对象的方法。</p><h1 id="二、内部状态与外部状态的区分"><a href="#二、内部状态与外部状态的区分" class="headerlink" title="二、内部状态与外部状态的区分"></a>二、内部状态与外部状态的区分</h1><p>享元享元，共享细粒度的单元。那么什么是细粒度的单元呢？如果用乐高积木作比喻，那么一个积木人可以称为一个完整的对象。如果我们把积木人拆开，可以进一步得到头、身躯，腿三个部分。而这些部分，相比于完整的积木人而言，它们三个就是细粒度的单元。</p><p>那么为什么要把一个完整的对象区分内外部呢？这岂不是增加了代码的复杂度？好，我们暂时搁置，接下来思考这样一个问题，如果我们要创造 10 个积木人，用程序怎么表示呢？</p><p>我们先创建一个积木人的类，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LegoMan</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Head;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Torso;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Leg;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LegoMan</span>(<span class="params"><span class="keyword">string</span> head, <span class="keyword">string</span> torso, <span class="keyword">string</span> leg</span>)</span></span><br><span class="line"><span class="function"></span>  {</span><br><span class="line">    <span class="keyword">this</span>.Head = head;</span><br><span class="line">    <span class="keyword">this</span>.Torso = torso;</span><br><span class="line">    <span class="keyword">this</span>.Leg = leg;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接着我们开始创造积木人，先采用直接 new 的方式：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> {</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">      LegoMan man1 = <span class="keyword">new</span> LegoMan(<span class="string">"head1"</span>, <span class="string">"torso1"</span>, <span class="string">"leg1"</span>);</span><br><span class="line">      LegoMan man2 = <span class="keyword">new</span> LegoMan(<span class="string">"head2"</span>, <span class="string">"torso2"</span>, <span class="string">"leg2"</span>);</span><br><span class="line">      ...</span><br><span class="line">      LegoMan man10 = <span class="keyword">new</span> LegoMan(<span class="string">"head10"</span>, <span class="string">"torso10"</span>, <span class="string">"leg10"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在我们得到了 10 个积木人，接下来我们对积木人作出一些限制，我们现在需要 10 个士兵积木人，由于士兵的制服统一，那么这一百个积木人的下半身是完全一样的，也就是说除了 Head，积木人的 Torso 和 Leg 都是一样的。现在我们继续创建十个士兵积木人。好吧，和上面的例子一样，只是传入的后两个参数均一致。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LegoMan manN = <span class="keyword">new</span> LegoMan(<span class="string">"headN"</span>, <span class="string">"torsoStandard"</span>, <span class="string">"legStandard"</span>)</span><br></pre></td></tr></tbody></table></figure><p>接下来，我们思考这样一个问题，如果需要 1000 个士兵积木人呢？如果采用一般的方式，需要创建 1000 个实例对象，但是这 1000 个对象都有着共同的部分，就是它们的 Torso 和 Leg。那我们可不可以把共同的部分抽取出来呢？当然可以，现在我们把 Torso 和 Leg 整合为一个 Body 类，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Body</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Torso;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Leg;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Body</span>(<span class="params"><span class="keyword">string</span> torso, <span class="keyword">string</span> leg</span>)</span></span><br><span class="line"><span class="function"></span>  {</span><br><span class="line">    <span class="keyword">this</span>.Torso = torso;</span><br><span class="line">    <span class="keyword">this</span>.Leg = leg;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>既然 Body 被提取出来了，那么 LegoMan 这个类也要被重写了，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LegoMan</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Head;</span><br><span class="line">  <span class="keyword">public</span> Body BodyIntrinsic;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LegoMan</span>(<span class="params"><span class="keyword">string</span> head, Body body</span>)</span></span><br><span class="line"><span class="function"></span>  {</span><br><span class="line">    <span class="keyword">this</span>.Head = head;</span><br><span class="line">    <span class="keyword">this</span>.BodyIntrinsic = body;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在我们再来创建 1000 个积木人士兵的话，应该是这样：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> {</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">      <span class="comment">//先创建一个通用的 Body </span></span><br><span class="line">      Body bodyStandard = <span class="keyword">new</span> Body(<span class="string">"torsoStandard"</span>, <span class="string">"legStandard"</span>);</span><br><span class="line">      </span><br><span class="line">      LegoMan man1 = <span class="keyword">new</span> LegoMan(<span class="string">"head1"</span>, bodyStandard);</span><br><span class="line">      LegoMan man2 = <span class="keyword">new</span> LegoMan(<span class="string">"head2"</span>, bodyStandard);</span><br><span class="line">      ...</span><br><span class="line">      LegoMan man1000 = <span class="keyword">new</span> LegoMan(<span class="string">"head1000"</span>, bodyStandard);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发现了吗？现在虽然也是1000个 LegoMan 的实例，但是却只有一个 Body，也就是说，1000个积木人士兵 的 Head，共享了一个 Body。听起来很疯狂，九头蛇也才九头，一千个头的怪物得多可怕！？哈哈，虽然积木人的玩具不可能这么拼，但是程序里，这种共享机制是可行的。Body 就是享元模式中的内部状态，一个重复度很高的细粒度单元。而 Head 则对应外部状态，会随着需求发生变化。这么分离的好处也很明显，就是大大减少了总数据量。如果不分离内外部，创建 1000 个积木人士兵的成本就是1000个 Head 和1000个 Body，而采用分离策略后，就只需要1000个 Head 外加1个 Body了。当随着创建对象数量级的增大，这种策略带来的好处会越来越明显。</p><h1 id="三、完整的享元模式"><a href="#三、完整的享元模式" class="headerlink" title="三、完整的享元模式"></a>三、完整的享元模式</h1><p>理解了分离内外部的原因后，下面简单实现一下享元模式</p><h2 id="1-Flyweight抽象类"><a href="#1-Flyweight抽象类" class="headerlink" title="1.Flyweight抽象类"></a>1.Flyweight抽象类</h2><p>通过最上面的 UML 图可以看出，Flyweight 被分为两部分，ConcreteFlyweight（共享的内部）和UnsharedConcreteFlyweight（不可共享的外部）。所以 Flyweight 最好被做成接口，或者抽象类，这里用抽象类实现，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Flyweight</span> </span><br><span class="line">{</span><br><span class="line">    <span class="comment">//内部状态</span></span><br><span class="line">    <span class="keyword">public</span> String intrinsic;</span><br><span class="line">    <span class="comment">//外部状态</span></span><br><span class="line">    <span class="keyword">public</span> String extrinsic;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//要求享元角色必须接受外部状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Flyweight</span>(<span class="params">String extrinsic</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">this</span>.extrinsic = extrinsic;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义业务操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Operate</span>(<span class="params"><span class="keyword">int</span> extrinsic</span>)</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-ConcreteFlyweight类"><a href="#2-ConcreteFlyweight类" class="headerlink" title="2. ConcreteFlyweight类"></a>2. ConcreteFlyweight类</h2><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> : <span class="title">Flyweight</span> </span><br><span class="line">{</span><br><span class="line">    <span class="comment">//接受外部状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span>(<span class="params">String extrinsic</span>):<span class="title">base</span>(<span class="params">extrinsic</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"共享的 "</span> + extrinsic);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据外部状态进行逻辑处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>(<span class="params"><span class="keyword">string</span> extrinsic</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"处理共享数据 "</span> + extrinsic);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-UnsharedConcreteFlyweight类"><a href="#3-UnsharedConcreteFlyweight类" class="headerlink" title="3. UnsharedConcreteFlyweight类"></a>3. UnsharedConcreteFlyweight类</h2><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> : <span class="title">Flyweight</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnsharedConcreteFlyweight</span>(<span class="params">String extrinsic</span>):<span class="title">base</span>(<span class="params">extrinsic</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"非共享的 "</span> + extrinsic);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operate</span>(<span class="params"><span class="keyword">int</span> extrinsic</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"处理非共享数据 "</span> + extrinsic);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-FlyweightFactory类"><a href="#4-FlyweightFactory类" class="headerlink" title="4. FlyweightFactory类"></a>4. FlyweightFactory类</h2><p>既然是处理大量数据，那免不了用一个对象池来进行管理，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span><br><span class="line">{</span><br><span class="line">    <span class="comment">//定义一个池容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Flyweight&gt; pool = <span class="keyword">new</span> List&lt;Flyweight&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//享元工厂</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Flyweight <span class="title">GetFlyweight</span>(<span class="params">String extrinsic</span>) </span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">var</span> flyweight = pool.Find(obj =&gt; obj.extrinsic == extrinsic);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (flyweight == <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            flyweight = <span class="keyword">new</span> ConcreteFlyweight(extrinsic);</span><br><span class="line">            pool.Add(flyweight);</span><br><span class="line">            Debug.Log(<span class="string">"新创建 "</span> + extrinsic);</span><br><span class="line">        }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">          Debug.Log(<span class="string">"从池中取出 "</span> + extrinsic);</span><br><span class="line">      }</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-客户端的调用"><a href="#5-客户端的调用" class="headerlink" title="5.客户端的调用"></a>5.客户端的调用</h2><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> {</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Flyweight flyweight1 = FlyweightFactory.GetFlyweight(<span class="string">"one"</span>);</span><br><span class="line">        flyweight1.Operate(<span class="string">"one"</span>);</span><br><span class="line">        </span><br><span class="line">        Flyweight flyweight2 = FlyweightFactory.GetFlyweight(<span class="string">"two"</span>);</span><br><span class="line">        flyweight2.Operate(<span class="string">"two"</span>);</span><br><span class="line">        </span><br><span class="line">        Flyweight flyweight3 = FlyweightFactory.getFlyweight(<span class="string">"one"</span>);</span><br><span class="line">        flyweight3.Operate(<span class="string">"one"</span>);</span><br><span class="line">        </span><br><span class="line">        Flyweight unsharedFlyweight = <span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">"one"</span>);</span><br><span class="line">        unsharedFlyweight.operate(<span class="string">"one"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>打印结果如下：<br>新创建 one<br>处理共享数据 one<br>新创建 two<br>处理共享数据 two<br>从池中取出 one<br>处理共享数据 one<br>非共享的 one<br>处理非共享数据 one</p><p>参考博客：<br><a href="https://www.cnblogs.com/adamjwh/p/9070107.html" target="_blank" rel="noopener">https://www.cnblogs.com/adamjwh/p/9070107.html</a><br><a href="https://blog.csdn.net/justloveyou_/article/details/55045638" target="_blank" rel="noopener">https://blog.csdn.net/justloveyou_/article/details/55045638</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式：享元模式&quot;&gt;&lt;a href=&quot;#设计模式：享元模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式：享元模式&quot;&gt;&lt;/a&gt;设计模式：享元模式&lt;/h1&gt;&lt;h1 id=&quot;一、什么是享元模式？&quot;&gt;&lt;a href=&quot;#一、什么是享元模式？&quot; cla</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_命令模式</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-13T11:49:20.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式：命令模式"><a href="#设计模式：命令模式" class="headerlink" title="设计模式：命令模式"></a>设计模式：命令模式</h1><p><strong>命令模式在GoF中的定义是：</strong></p><blockquote><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化； 对请求排队或记录请求日志，以及支持可撤销的操作。<br>命令模式是一种回调的面向对象实现。</p></blockquote><p><strong>游戏设计模式里把它精简为：</strong></p><blockquote><p>命令是具现化的方法调用。</p></blockquote><p>两种术语都意味着将概念变成数据一个对象可以存储在变量中，传给函数。<br>所以称命令模式为“具现化方法调用”，意思是方法调用被存储在对象中。<br>类似C#里的回调<br>把一个对象传递到方法中，让方法内部解析。</p><p>下面是一个C#版本的角色控制，传入一个角色，就能调用对应的各种行动。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 命令基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Command</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">BaseCharacter character</span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 跳的命令</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JumpCommand</span> : <span class="title">Command</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">BaseCharacter character</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        character.Jump();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 射击的命令</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FireCommand</span> : <span class="title">Command</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">BaseCharacter character</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        character.Fire();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移动的命令</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoveCommand</span> : <span class="title">Command</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">BaseCharacter character</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 对输入的解析</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InputHandler</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JumpCommand buttonA;</span><br><span class="line">    <span class="keyword">private</span> FireCommand buttonD;</span><br><span class="line">    <span class="keyword">private</span> MoveCommand buttonW;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Command <span class="title">HandleInputAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A)) { <span class="keyword">return</span> buttonA; }</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.D)) { <span class="keyword">return</span> buttonD; }</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.W)) { <span class="keyword">return</span> buttonW; }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Player mPlayer;</span><br><span class="line">    <span class="keyword">private</span> Enemy mEnemy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Command</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Command command = HandleInputAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (command != <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            command.Execute(mPlayer);</span><br><span class="line">            command.Execute(mEnemy);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">BaseCharacter</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fire</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">base</span>.Fire();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Jump</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">base</span>.Jump();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Enemy</span> : <span class="title">BaseCharacter</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fire</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">base</span>.Fire();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 角色的基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseCharacter</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Jump</span>(<span class="params"></span>)</span> { }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fire</span>(<span class="params"></span>)</span> { }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式：命令模式&quot;&gt;&lt;a href=&quot;#设计模式：命令模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式：命令模式&quot;&gt;&lt;/a&gt;设计模式：命令模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;命令模式在GoF中的定义是：&lt;/strong&gt;&lt;/p&gt;
&lt;block</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_状态模式</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-13T11:49:11.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式：状态模式（有限、分层和下推状态机）"><a href="#设计模式：状态模式（有限、分层和下推状态机）" class="headerlink" title="设计模式：状态模式（有限、分层和下推状态机）"></a>设计模式：状态模式（有限、分层和下推状态机）</h1><p>实现了最简单的有限状态机</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FSM</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> MonoStateMachine monoStateMachine = <span class="keyword">new</span> MonoStateMachine();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RunState RunState;</span><br><span class="line">    <span class="keyword">public</span> IdleState IdleState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        monoStateMachine.StartState(RunState);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        monoStateMachine.Update();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RunState</span> : <span class="title">MonoState</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RunState instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RunState <span class="title">Instance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            instance = <span class="keyword">new</span> RunState();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"进入跑步"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"开始跑步"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Debug.Log(<span class="string">"退出跑步"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IdleState</span> : <span class="title">MonoState</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdleState instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IdleState <span class="title">Instance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            instance = <span class="keyword">new</span> IdleState();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonoState</span> </span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Enter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonoStateMachine</span></span><br><span class="line">{</span><br><span class="line">   <span class="comment">// private MonoState mOwner;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MonoState mCurrentState;</span><br><span class="line">    <span class="keyword">private</span> MonoState mPreviousState;</span><br><span class="line">    <span class="keyword">private</span> MonoState mGlobalState;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MonoStateMachine</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        mCurrentState = <span class="literal">null</span>;</span><br><span class="line">        mPreviousState = <span class="literal">null</span>;</span><br><span class="line">        mGlobalState = <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置初始状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="state"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartState</span>(<span class="params">MonoState state</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        mCurrentState = state <span class="keyword">as</span> MonoState;</span><br><span class="line">        mCurrentState.Enter();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeState</span>(<span class="params">MonoState state</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (state == <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            Debug.Log(<span class="string">"无法找到此状态"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        mPreviousState = mCurrentState;</span><br><span class="line">        mCurrentState.Exit();</span><br><span class="line">        <span class="comment">//转换后</span></span><br><span class="line">        mCurrentState = state <span class="keyword">as</span> MonoState;</span><br><span class="line">        mCurrentState.Enter();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 还原之前的状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RevertToPreviouState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        ChangeState(mPreviousState);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 得到当前状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MonoState <span class="title">GetCurrentState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">return</span> mCurrentState;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 得到之前的状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MonoState <span class="title">GetPreviousState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">return</span> mPreviousState;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (mCurrentState!=<span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            mCurrentState.Execute();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式：状态模式（有限、分层和下推状态机）&quot;&gt;&lt;a href=&quot;#设计模式：状态模式（有限、分层和下推状态机）&quot; class=&quot;headerlink&quot; title=&quot;设计模式：状态模式（有限、分层和下推状态机）&quot;&gt;&lt;/a&gt;设计模式：状态模式（有限、分层和下推状态</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Design_Pattern_单例</title>
    <link href="http://yoursite.com/2019/08/13/Design-Pattern-%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/08/13/Design-Pattern-%E5%8D%95%E4%BE%8B/</id>
    <published>2019-08-13T11:48:30.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><ul><li>单例为最常见的一种设计模式，目前在用的主要有两种方式，一种是基于Unity的，一种是基于C#的</li><li>一般来说，unity里的单例分为两种，一种是继承于Monobehaviour的，一种是不继承于它的；</li><li>这里给出了两种实现方法</li></ul><p><strong>使用Unity里的方法</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public abstract class ScriptSingleton&lt;T&gt;  : MonoBehaviour where T : ScriptSingleton&lt;T&gt;</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">static</span> T _instance;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">//从场景中找T脚本的对象</span></span><br><span class="line">                    _instance = FindObjectOfType&lt;T&gt;();</span><br><span class="line">                    <span class="keyword">if</span> (FindObjectsOfType&lt;T&gt;().Length &gt; <span class="number">1</span>)</span><br><span class="line">                    {</span><br><span class="line">                        Debug.LogError(<span class="string">"场景中的单例脚本数量 &gt; 1:"</span> + _instance.GetType().ToString());</span><br><span class="line">                        <span class="keyword">return</span> _instance;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">//场景中找不到的情况</span></span><br><span class="line">                    <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">string</span> instanceName = <span class="keyword">typeof</span>(T).Name;</span><br><span class="line">                        GameObject instanceGO = GameObject.Find(instanceName);</span><br><span class="line">                        <span class="keyword">if</span> (instanceGO == <span class="literal">null</span>)</span><br><span class="line">                        {</span><br><span class="line">                            instanceGO = <span class="keyword">new</span> GameObject(instanceName);</span><br><span class="line">                            DontDestroyOnLoad(instanceGO);</span><br><span class="line">                            _instance = instanceGO.AddComponent&lt;T&gt;();</span><br><span class="line">                            DontDestroyOnLoad(_instance);</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        {</span><br><span class="line">                            <span class="comment">//场景中已存在同名游戏物体时就打印提示</span></span><br><span class="line">                            Debug.LogError(<span class="string">"场景中已存在单例:"</span> + instanceGO.name);</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> _instance;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            _instance = <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>通过反射实现的单例</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Singleton&lt;T&gt; where T : Singleton&lt;T&gt; </span><br><span class="line">{ </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> T mInstance = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Singleton</span>(<span class="params"></span>)</span> { }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance </span><br><span class="line">    { </span><br><span class="line">        <span class="keyword">get</span> </span><br><span class="line">        { </span><br><span class="line">            <span class="keyword">if</span> (mInstance == <span class="literal">null</span>)</span><br><span class="line">            {</span><br><span class="line">                 <span class="keyword">var</span> ctors = <span class="keyword">typeof</span>(T).GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic);  </span><br><span class="line">                <span class="keyword">var</span> ctor = Array.Find(ctors, c =&gt; c.GetParameters().Length == <span class="number">0</span>); </span><br><span class="line">                <span class="keyword">if</span> (ctor == <span class="literal">null</span>) </span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Non-public ctor() not found!"</span>); </span><br><span class="line">                }</span><br><span class="line">                 mInstance = ctor.Invoke(<span class="literal">null</span>) <span class="keyword">as</span> T; }</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> mInstance;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单例&quot;&gt;&lt;a href=&quot;#单例&quot; class=&quot;headerlink&quot; title=&quot;单例&quot;&gt;&lt;/a&gt;单例&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;单例为最常见的一种设计模式，目前在用的主要有两种方式，一种是基于Unity的，一种是基于C#的&lt;/li&gt;
&lt;li&gt;一般来说，un</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/设计模式/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/设计模式/"/>
    
  </entry>
  
  <entry>
    <title>Stencil_Test</title>
    <link href="http://yoursite.com/2019/08/10/Stencil-Test/"/>
    <id>http://yoursite.com/2019/08/10/Stencil-Test/</id>
    <published>2019-08-10T09:13:45.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h4 id="模板测试-Stencil-Test-相关"><a href="#模板测试-Stencil-Test-相关" class="headerlink" title="模板测试(Stencil Test)相关"></a>模板测试(Stencil Test)相关</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>模板测试一般发生在深度测试前，在片段着色器处理完一个片段后执行。和深度测试一样也会丢弃片元。模板测试是根据一个缓冲来进行的，它叫做模板缓冲(Stencil Buffer)</p><p>一个模板缓冲中，（通常）每个模板值(Stencil Value)是8位的。所以每个像素/片段一共能有256种不同的模板值。我们可以将这些模板值设置为我们想要的值，然后当某一个片段有某一个模板值的时候，我们就可以选择丢弃或是保留这个片段了。</p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><p>模板缓冲操作允许我们在渲染片段时将模板缓冲设定为一个特定的值。通过在渲染时修改模板缓冲的内容，我们写入了模板缓冲。在同一个（或者接下来的）渲染迭代中，我们可以读取这些值，来决定丢弃还是保留某个片段。使用模板缓冲的时候你可以尽情发挥，但大体的步骤如下：</p><ul><li>启用模板缓冲的写入。</li><li>渲染物体，更新模板缓冲的内容。</li><li>禁用模板缓冲的写入。</li><li>渲染（其它）物体，这次根据模板缓冲的内容丢弃特定的片段。</li></ul><p>所以，通过使用模板缓冲，我们可以根据场景中已绘制的其它物体的片段，来决定是否丢弃特定的片段。</p><h5 id="具体案例"><a href="#具体案例" class="headerlink" title="具体案例"></a>具体案例</h5><p>一般来说，stencil完整的语法如下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stencil</span><br><span class="line">{</span><br><span class="line">    Ref referenceValue</span><br><span class="line">    ReadMask  readMask</span><br><span class="line">    WriteMask writeMask</span><br><span class="line">    Comp comparisonFunction</span><br><span class="line">    Pass stencilOperation</span><br><span class="line">    Fail stencilOperation</span><br><span class="line">    ZFail stencilOperation</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们可以用模板缓冲来实现一个物体轮廓，步骤如下：</p><ol><li>在绘制（需要添加轮廓的）物体之前，将模板函数设置为GL_ALWAYS，每当物体的片段被渲染时，将模板缓冲更新为1。</li><li>渲染物体。</li><li>禁用模板写入以及深度测试。</li><li>将每个物体缩放一点点。</li><li>使用一个不同的片段着色器，输出一个单独的（边框）颜色。</li><li>再次绘制物体，但只在它们片段的模板值不等于1时才绘制。</li><li>再次启用模板写入和深度测试。</li></ol><p>这个过程将每个物体的片段的模板缓冲设置为1，当我们想要绘制边框的时候，我们主要绘制放大版本的物体中模板测试通过的部分，也就是物体的边框的位置。我们主要使用模板缓冲丢弃了放大版本中属于原物体片段的部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;模板测试-Stencil-Test-相关&quot;&gt;&lt;a href=&quot;#模板测试-Stencil-Test-相关&quot; class=&quot;headerlink&quot; title=&quot;模板测试(Stencil Test)相关&quot;&gt;&lt;/a&gt;模板测试(Stencil Test)相关&lt;/h4&gt;&lt;</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="图形学" scheme="http://yoursite.com/tags/图形学/"/>
    
  </entry>
  
  <entry>
    <title>Culling</title>
    <link href="http://yoursite.com/2019/08/10/Culling/"/>
    <id>http://yoursite.com/2019/08/10/Culling/</id>
    <published>2019-08-10T09:12:41.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h4 id="面剔除（Culling）"><a href="#面剔除（Culling）" class="headerlink" title="面剔除（Culling）"></a>面剔除（Culling）</h4><p>​    一个3DCube我们最多只能看到3个面，那多余的几个面就能丢弃它，能节省片段着色器的执行数，这就是面剔除（Culling），我们可以分析顶点数据的环绕顺序(Winding Order)来区分正面和背面，而反面在绝大多数情况下是不用渲染的。</p><h5 id="在Unity中Cull有三种用于控制几何体的哪一面会被剔除"><a href="#在Unity中Cull有三种用于控制几何体的哪一面会被剔除" class="headerlink" title="在Unity中Cull有三种用于控制几何体的哪一面会被剔除"></a>在Unity中Cull有三种用于控制几何体的哪一面会被剔除</h5><p><strong>Cull Back || Front || Off</strong></p><ul><li>Cull Back——不渲染多边形的背面（默认）。</li><li>Cull Front——不渲染多边形的正面。这将看到原来被正面遮挡的背面内容。</li><li>Cull Off——禁用剔除，两个面都会被绘制。同于一些特殊的效果。（一般用于绘制比较薄的对象，如：纸）</li></ul><h5 id="默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形。"><a href="#默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形。" class="headerlink" title="默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形。"></a>默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形。</h5><p>观察者所面向的所有三角形顶点就是我们所指定的正确环绕顺序了，而立方体另一面的三角形顶点则是以相反的环绕顺序所渲染的。这样的结果就是，我们所面向的三角形将会是正向三角形，而背面的三角形则是背向三角形。如下图：</p><p><img src="https://i.loli.net/2019/07/18/5d2f478fdbecc46253.png" alt=""></p><p>​    在顶点数据中，我们将两个三角形都以逆时针顺序定义（正面的三角形是1、2、3，背面的三角形也是1、2、3（如果我们从正面看这个三角形的话））。然而，如果从观察者当前视角使用1、2、3的顺序来绘制的话，从观察者的方向来看，背面的三角形将会是以顺时针顺序渲染的。虽然背面的三角形是以逆时针定义的，它现在是以顺时针顺序渲染的了。这正是我们想要剔除（Cull，丢弃）的不可见面了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;面剔除（Culling）&quot;&gt;&lt;a href=&quot;#面剔除（Culling）&quot; class=&quot;headerlink&quot; title=&quot;面剔除（Culling）&quot;&gt;&lt;/a&gt;面剔除（Culling）&lt;/h4&gt;&lt;p&gt;​    一个3DCube我们最多只能看到3个面，那多余的几</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="图形学" scheme="http://yoursite.com/tags/图形学/"/>
    
  </entry>
  
  <entry>
    <title>Blending</title>
    <link href="http://yoursite.com/2019/08/10/Blending/"/>
    <id>http://yoursite.com/2019/08/10/Blending/</id>
    <published>2019-08-10T09:12:19.000Z</published>
    <updated>2023-02-17T15:32:30.100Z</updated>
    
    <content type="html"><![CDATA[<h4 id="混合-Blending"><a href="#混合-Blending" class="headerlink" title="混合(Blending)"></a>混合(Blending)</h4><p>混合(Blending)通常是实现物体透明度(Transparency)的一种技术。</p><p>在Unity中提供了渲染队列来实现透明效果，使用SubShader的Queue标签决定渲染队列，索引越小越早渲染。</p><table><thead><tr><th>Background</th><th>索引</th><th>效果</th></tr></thead><tbody><tr><td>Background</td><td>1000</td><td>最先绘制，通常绘制背景</td></tr><tr><td>Geometry</td><td>2000</td><td>默认</td></tr><tr><td>AlphaTest</td><td>2450</td><td>需要透明度测试使用此队列</td></tr><tr><td>Transparent</td><td>3000</td><td>从后往前渲染，透明度混合使用此队列</td></tr><tr><td>Overlay</td><td>4000</td><td>实现叠加效果</td></tr></tbody></table><p>Unity中实现物体透明分全透明和半透明两种：</p><ol><li><p>透明度测试（全透明），给定一个值，不满足条件的都将被舍弃</p><p>函数： void clip (float x)</p><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clip(float x);</span><br><span class="line">if(x&lt;0.5f){  //舍弃小于0.5的片元</span><br><span class="line">    discard;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>透明度混合（半透明），Blend是Unity提供的设置混合模式的命令。想要实现半透明的效果就需要把当前自身的颜色和已经存在的颜色缓冲中的颜色值进行混合。</p><p>一般的混合都是通过以下方程来实现：</p><p><img src="https://i.loli.net/2019/07/13/5d29cc8754c2f30953.png" alt=""></p><ul><li>C source：源颜色向量。这是源自纹理的颜色向量。</li><li>C destination：目标颜色向量。这是当前储存在颜色缓冲中的颜色向量。</li><li>F source：源因子值。指定了alpha值对源颜色的影响。</li><li>F destination：目标因子值。指定了alpha值对目标颜色的影响。</li></ul><p>例如：要实现红和绿两种颜色的混合</p><p><img src="https://i.loli.net/2019/07/13/5d29cd84b9aa434910.png" alt=""></p><p>结果就是重叠方形的片段包含了一个60%绿色，40%红色的一种脏兮兮的颜色：</p><p><img src="https://i.loli.net/2019/07/13/5d29cdb288de887569.png" alt=""></p></li></ol><p>​        要想让混合在多个物体上工作，我们需要最先绘制最远的物体，最后绘制最近的物体。普通不需要混合的物体仍然可以使用深度缓冲正常绘制，所以它们不需要排序。但我们仍要保证它们在绘制（排序的）透明物体之前已经绘制完毕了。当绘制一个有不透明和透明物体的场景的时候，大体的原则如下：</p><ol><li>先绘制所有不透明的物体。</li><li>对所有透明的物体排序。</li><li>按顺序绘制所有透明的物体。</li></ol><p>在Unity中为了得到透明物体的排序我们需要开启深度写入，但这会使透明无法进行，所以需要两个Pass来渲染，第一个开启深度写入，但不输出颜色，第二个Pass进行正常的透明度混合。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pass{</span><br><span class="line">    ZWrite On</span><br><span class="line">    ColorMask 0</span><br><span class="line">}</span><br><span class="line">Pass{</span><br><span class="line">    //混合颜色</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;混合-Blending&quot;&gt;&lt;a href=&quot;#混合-Blending&quot; class=&quot;headerlink&quot; title=&quot;混合(Blending)&quot;&gt;&lt;/a&gt;混合(Blending)&lt;/h4&gt;&lt;p&gt;混合(Blending)通常是实现物体透明度(Transpare</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="图形学" scheme="http://yoursite.com/tags/图形学/"/>
    
  </entry>
  
  <entry>
    <title>Unity记录</title>
    <link href="http://yoursite.com/2019/07/17/Unity%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/07/17/Unity%E8%AE%B0%E5%BD%95/</id>
    <published>2019-07-17T10:06:46.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>相同的材质，属性不同，避免创建新的材质</p><p><strong>MaterialPropertyBlock</strong></p></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//会创建一个新的材质</span><br><span class="line">meshRenderer.material.color = clolr;</span><br><span class="line">//不会创建一个新的材质</span><br><span class="line">var propertyBlock = new MaterialPropertyBlock();</span><br><span class="line">propertyBlock.SetColor("_Color", color);</span><br><span class="line">meshRenderer.SetPropertyBlock(propertyBlock);</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;相同的材质，属性不同，避免创建新的材质&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MaterialPropertyBlock&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;</summary>
      
    
    
    
    <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
    <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>ZTest</title>
    <link href="http://yoursite.com/2019/07/12/ZTest/"/>
    <id>http://yoursite.com/2019/07/12/ZTest/</id>
    <published>2019-07-12T07:14:15.000Z</published>
    <updated>2023-02-17T15:32:30.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深度测试相关（ZTest）"><a href="#深度测试相关（ZTest）" class="headerlink" title="深度测试相关（ZTest）"></a>深度测试相关（ZTest）</h3><p>在不使用深度测试的时候，如果我们先绘制一个距离较近的物体，再绘制距离较远的物体，则距离远的物体因为后绘制，会把距离近的物体覆盖掉，这样的效果并不是我们所希望的。而有了深度缓冲以后，绘制物体的顺序就不那么重要了，都能按照远近（Z值）正常显示，这很关键。</p><h4 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h4><p>深度为该像素点离摄像机的距离（z值），存在深度缓冲中，通常会以16、24、32位float来存储，精度越高越精确。通常为24位</p><h4 id="深度测试"><a href="#深度测试" class="headerlink" title="深度测试"></a>深度测试</h4><p>将该像素点的z值对比G-Buffer的值，通过则更新为新的深度值，测试失败则丢弃该片段</p><h4 id="深度缓冲"><a href="#深度缓冲" class="headerlink" title="深度缓冲"></a>深度缓冲</h4><p>深度缓冲中存着深度数据，由于深度缓冲是在片段着色器运行后在屏幕空间进行，现在大部分的GPU都提供一个叫做提前深度测试(Early Depth Testing)的硬件特性。提前深度测试允许深度测试在片段着色器之前运行。只要我们清楚一个片段永远不会是可见的（它在其他物体之后），我们就能提前丢弃这个片段。</p><h4 id="深度值精度"><a href="#深度值精度" class="headerlink" title="深度值精度"></a>深度值精度</h4><p>深度缓冲包含一个介于0.0和1.0之前的值，里面存着深度值为距离摄像机的距离，但几乎永远不会使用这样的线性深度缓冲(Linear Depth Buffer)的。要想有正确的投影性质，需要使用一个非线性的深度方程，它是与 1/z 成正比的。它做的就是在z值很小的时候提供非常高的精度，而在z值很远的时候提供更少的精度。这样才能更大的利用深度值的精度。</p><p>由于非线性方程与 1/z 成正比，在1.0和2.0之间的z值将会变换至1.0到0.5之间的深度值，这就是一个float提供给我们的一半精度了，这在z值很小的情况下提供了非常大的精度。在50.0和100.0之间的z值将会只占2%的float精度，这正是我们所需要的。这样的一个考虑了远近距离的方程是这样的：</p><p><img src="https://i.loli.net/2019/07/09/5d24b2e0ecc0249057.png" alt=""></p><p>变成图大概是这样</p><p><img src="https://i.loli.net/2019/07/09/5d24b30817a6873744.png" alt=""></p><h4 id="深度冲突"><a href="#深度冲突" class="headerlink" title="深度冲突"></a>深度冲突</h4><p>一个很常见的错误是俩个平面紧密贴在一起时，深度缓冲没有足够的精度来决定谁在前面，就会出现交替闪烁的现象，叫深度冲突(Z-fighting)</p><p>抗深度冲突技术中，最简单的就是使用更高的精度深度缓冲，会牺牲掉一些性能，却能获得更好的效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;深度测试相关（ZTest）&quot;&gt;&lt;a href=&quot;#深度测试相关（ZTest）&quot; class=&quot;headerlink&quot; title=&quot;深度测试相关（ZTest）&quot;&gt;&lt;/a&gt;深度测试相关（ZTest）&lt;/h3&gt;&lt;p&gt;在不使用深度测试的时候，如果我们先绘制一个距离较近的</summary>
      
    
    
    
    <category term="图形学" scheme="http://yoursite.com/categories/图形学/"/>
    
    
    <category term="图形学" scheme="http://yoursite.com/tags/图形学/"/>
    
  </entry>
  
</feed>
